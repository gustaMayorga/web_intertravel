// API Routes para App Cliente - InterTravel (FIXED)
const express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

// Cargar database con fallback
let query;
try {
  const { query: dbQuery } = require('../database');
  query = dbQuery;
  console.log('✅ Database loaded for app-client routes');
} catch (error) {
  console.warn('⚠️ Database not available, using mock:', error.message);
  // Mock query function
  query = async (sql, params) => {
    console.log('🔄 Mock query:', sql.substring(0, 50) + '...');
    if (sql.includes('SELECT') && sql.includes('users') && sql.includes('email')) {
      return { rows: [{
        id: 1, username: 'test@test.com', email: 'test@test.com',
        password_hash: await bcrypt.hash('123456', 10),
        role: 'user', full_name: 'Test User', first_name: 'Test', last_name: 'User',
        phone: '123456789', is_active: true, created_at: new Date()
      }] };
    }
    if (sql.includes('INSERT INTO users')) {
      return { rows: [{ id: Math.floor(Math.random() * 1000), username: params[1], email: params[1], full_name: params[4], role: 'user', created_at: new Date() }] };
    }
    return { rows: [] };
  };
}

const router = express.Router();
const JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-this-in-production';

// Middleware para verificar JWT
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN

  if (!token) {
    return res.status(401).json({
      success: false,
      error: 'Token de acceso requerido'
    });
  }

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({
        success: false,
        error: 'Token inválido o expirado'
      });
    }
    req.user = user;
    next();
  });
};

// ======================================
// AUTENTICACIÓN PARA APP CLIENTE
// ======================================

/**
 * POST /api/app/auth/login
 * Login específico para app cliente
 */
router.post('/auth/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    console.log('📱 App Cliente - Login attempt:', email);

    // Validaciones
    if (!email || !password) {
      return res.status(400).json({
        success: false,
        error: 'Email y contraseña son requeridos'
      });
    }

    // Buscar usuario
    const userResult = await query(
      'SELECT id, username, email, password_hash, role, full_name, first_name, last_name, phone, is_active FROM users WHERE email = $1',
      [email.toLowerCase()]
    );

    if (userResult.rows.length === 0) {
      return res.status(401).json({
        success: false,
        error: 'Credenciales inválidas'
      });
    }

    const user = userResult.rows[0];

    // Verificar si está activo
    if (!user.is_active) {
      return res.status(401).json({
        success: false,
        error: 'Cuenta desactivada. Contacta soporte.'
      });
    }

    // Verificar contraseña
    const passwordMatch = await bcrypt.compare(password, user.password_hash);
    if (!passwordMatch) {
      return res.status(401).json({
        success: false,
        error: 'Credenciales inválidas'
      });
    }

    // Generar JWT
    const token = jwt.sign(
      { 
        userId: user.id, 
        email: user.email, 
        role: user.role,
        fullName: user.full_name
      },
      JWT_SECRET,
      { expiresIn: '30d' } // Token de larga duración para app móvil
    );

    console.log('✅ App Cliente - Login exitoso:', user.id);

    res.json({
      success: true,
      message: 'Login exitoso',
      user: {
        id: user.id,
        firstName: user.first_name,
        lastName: user.last_name,
        fullName: user.full_name,
        email: user.email,
        phone: user.phone,
        role: user.role
      },
      token: token
    });

  } catch (error) {
    console.error('❌ Error en login app cliente:', error);
    res.status(500).json({
      success: false,
      error: 'Error interno del servidor'
    });
  }
});

/**
 * GET /api/app/health
 * Health check para app cliente
 */
router.get('/health', (req, res) => {
  res.json({
    success: true,
    message: 'App Cliente API funcionando',
    timestamp: new Date().toISOString(),
    endpoints: {
      auth: '/api/app/auth/login',
      profile: '/api/app/user/profile',
      bookings: '/api/app/user/bookings'
    }
  });
});

console.log('✅ App Client router loaded successfully');
module.exports = router;