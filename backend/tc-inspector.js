#!/usr/bin/env node

// ===============================================
// TRAVEL COMPOSITOR INSPECTOR - MINI SISTEMA MANUAL
// ===============================================

const readline = require('readline');

// Importar los diferentes m√≥dulos TC
const tcSafe = require('./travel-compositor-safe.js');
const tcSimple = require('./travel-compositor-simple-fixed.js');

// Logger simple
function log(level, message, data = null) {
  const timestamp = new Date().toISOString();
  console.log(`${timestamp} [${level}] ${message}`);
  if (data) {
    console.log('   Data:', JSON.stringify(data, null, 2));
  }
}

// Inspector interactivo
class TCInspector {
  constructor() {
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
  }

  async start() {
    console.log('üîç ===============================================');
    console.log('üîç TRAVEL COMPOSITOR INSPECTOR - INTERACTIVO');
    console.log('üîç ===============================================');
    console.log('');
    
    while (true) {
      await this.showMenu();
    }
  }

  async showMenu() {
    console.log('\nüìã ¬øQu√© quieres inspeccionar?');
    console.log('');
    console.log('1. üîë Probar autenticaci√≥n TC');
    console.log('2. üì¶ Obtener 5 paquetes (safe)');
    console.log('3. üåä Obtener TODOS los paquetes (safe)');
    console.log('4. üîì Probar sin autenticaci√≥n (simple)');
    console.log('5. üìä Analizar respuesta cruda');
    console.log('6. üîÑ Comparar m√≥dulos TC');
    console.log('7. üß™ Test completo');
    console.log('8. üõ†Ô∏è Limpiar cache');
    console.log('0. ‚ùå Salir');
    console.log('');

    const choice = await this.question('Elige una opci√≥n (0-8): ');
    
    switch (choice) {
      case '1':
        await this.testAuthentication();
        break;
      case '2':
        await this.getFewPackages();
        break;
      case '3':
        await this.getAllPackages();
        break;
      case '4':
        await this.testNoAuth();
        break;
      case '5':
        await this.analyzeRawResponse();
        break;
      case '6':
        await this.compareModules();
        break;
      case '7':
        await this.fullTest();
        break;
      case '8':
        await this.clearCache();
        break;
      case '0':
        console.log('üëã Adi√≥s!');
        process.exit(0);
        break;
      default:
        console.log('‚ùå Opci√≥n inv√°lida');
    }
  }

  async question(prompt) {
    return new Promise((resolve) => {
      this.rl.question(prompt, resolve);
    });
  }

  async testAuthentication() {
    console.log('\nüîë ===============================================');
    console.log('üîë PROBANDO AUTENTICACI√ìN TC');
    console.log('üîë ===============================================');

    try {
      console.log('üì° Intentando autenticaci√≥n...');
      
      const start = Date.now();
      const result = await tcSafe.authenticate();
      const duration = Date.now() - start;

      console.log(`‚è±Ô∏è Duraci√≥n: ${duration}ms`);
      
      if (result.success) {
        console.log('‚úÖ ¬°AUTENTICACI√ìN EXITOSA!');
        console.log(`üîë Token: ${result.token.substring(0, 20)}...`);
        console.log(`‚è∞ Expira: ${new Date(tcSafe.tokenExpiration).toLocaleString()}`);
        
        // Verificar si el token es v√°lido
        const isValid = tcSafe.isTokenValid();
        console.log(`‚úîÔ∏è Token v√°lido: ${isValid}`);
        
      } else {
        console.log('‚ùå AUTENTICACI√ìN FALL√ì');
        console.log(`‚ùå Error: ${result.error}`);
      }

    } catch (error) {
      console.log('üí• ERROR EN AUTENTICACI√ìN');
      console.log(`üí• ${error.message}`);
    }

    await this.question('\nPresiona Enter para continuar...');
  }

  async getFewPackages() {
    console.log('\nüì¶ ===============================================');
    console.log('üì¶ OBTENIENDO POCOS PAQUETES (SAFE)');
    console.log('üì¶ ===============================================');

    try {
      const start = Date.now();
      console.log('üì° Obteniendo 5 paquetes...');
      
      const result = await tcSafe.getPackages(5);
      const duration = Date.now() - start;

      console.log(`‚è±Ô∏è Duraci√≥n: ${duration}ms`);
      
      if (result.success) {
        console.log('‚úÖ ¬°PAQUETES OBTENIDOS!');
        console.log(`üìä Total recibido: ${result.packages.length}`);
        console.log(`üìä Fuente: ${result.source}`);
        console.log(`üìä P√°ginas: ${result.pages || 'N/A'}`);
        
        // Analizar primer paquete
        if (result.packages.length > 0) {
          const first = result.packages[0];
          console.log('\nüìã PRIMER PAQUETE:');
          console.log(`   ID: ${first.id}`);
          console.log(`   T√≠tulo: ${first.title}`);
          console.log(`   Destino: ${first.destination}`);
          console.log(`   Pa√≠s: ${first.country}`);
          console.log(`   Precio: ${first.price?.amount} ${first.price?.currency}`);
          console.log(`   Categor√≠a: ${first.category}`);
          console.log(`   Fuente: ${first._source}`);
          console.log(`   Tipo: ${first._type}`);
        }
        
        // Analizar diversidad
        const countries = [...new Set(result.packages.map(p => p.country))];
        const categories = [...new Set(result.packages.map(p => p.category))];
        
        console.log('\nüåç AN√ÅLISIS DE DIVERSIDAD:');
        console.log(`   Pa√≠ses √∫nicos: ${countries.length}`);
        console.log(`   Pa√≠ses: ${countries.join(', ')}`);
        console.log(`   Categor√≠as √∫nicas: ${categories.length}`);
        console.log(`   Categor√≠as: ${categories.join(', ')}`);
        
      } else {
        console.log('‚ùå ERROR OBTENIENDO PAQUETES');
        console.log(`‚ùå ${result.error}`);
      }

    } catch (error) {
      console.log('üí• ERROR EN OBTENCI√ìN');
      console.log(`üí• ${error.message}`);
    }

    await this.question('\nPresiona Enter para continuar...');
  }

  async getAllPackages() {
    console.log('\nüåä ===============================================');
    console.log('üåä OBTENIENDO TODOS LOS PAQUETES (SAFE)');
    console.log('üåä ===============================================');

    try {
      const start = Date.now();
      console.log('üì° Obteniendo TODOS los paquetes (puede tardar)...');
      
      const result = await tcSafe.getAllPackages();
      const duration = Date.now() - start;

      console.log(`‚è±Ô∏è Duraci√≥n: ${duration}ms (${Math.round(duration/1000)}s)`);
      
      if (result.success) {
        console.log('‚úÖ ¬°TODOS LOS PAQUETES OBTENIDOS!');
        console.log(`üìä Total recibido: ${result.packages.length}`);
        console.log(`üìä Fuente: ${result.source}`);
        console.log(`üìä P√°ginas procesadas: ${result.pages || 'N/A'}`);
        
        // Estad√≠sticas completas
        const stats = tcSafe.getPackageStats(result.packages);
        console.log('\nüìä ESTAD√çSTICAS COMPLETAS:');
        console.log(`   Total: ${stats.total}`);
        console.log(`   Pa√≠ses: ${Object.keys(stats.byCountry).length}`);
        console.log(`   Categor√≠as: ${Object.keys(stats.byCategory).length}`);
        console.log(`   Precio promedio: $${stats.priceRange.avg}`);
        console.log(`   Rango precios: $${stats.priceRange.min} - $${stats.priceRange.max}`);
        
        console.log('\nüåç TOP PA√çSES:');
        const topCountries = Object.entries(stats.byCountry)
          .sort(([,a], [,b]) => b - a)
          .slice(0, 5);
        topCountries.forEach(([country, count]) => {
          console.log(`   ${country}: ${count} paquetes`);
        });
        
        console.log('\nüè∑Ô∏è TOP CATEGOR√çAS:');
        const topCategories = Object.entries(stats.byCategory)
          .sort(([,a], [,b]) => b - a)
          .slice(0, 5);
        topCategories.forEach(([category, count]) => {
          console.log(`   ${category}: ${count} paquetes`);
        });
        
      } else {
        console.log('‚ùå ERROR OBTENIENDO TODOS LOS PAQUETES');
        console.log(`‚ùå ${result.error}`);
      }

    } catch (error) {
      console.log('üí• ERROR EN OBTENCI√ìN MASIVA');
      console.log(`üí• ${error.message}`);
    }

    await this.question('\nPresiona Enter para continuar...');
  }

  async testNoAuth() {
    console.log('\nüîì ===============================================');
    console.log('üîì PROBANDO SIN AUTENTICACI√ìN (SIMPLE)');
    console.log('üîì ===============================================');

    try {
      const start = Date.now();
      console.log('üì° Probando endpoints sin autenticaci√≥n...');
      
      const result = await tcSimple.getPackages(5);
      const duration = Date.now() - start;

      console.log(`‚è±Ô∏è Duraci√≥n: ${duration}ms`);
      
      if (result.success) {
        console.log('‚úÖ ¬°FUNCIONA SIN AUTENTICACI√ìN!');
        console.log(`üìä Total recibido: ${result.packages.length}`);
        console.log(`üìä Endpoint usado: ${result.endpoint}`);
        console.log(`üìä Fuente: ${result.source}`);
        
        // Mostrar primer paquete
        if (result.packages.length > 0) {
          const first = result.packages[0];
          console.log('\nüìã PRIMER PAQUETE:');
          console.log(`   ID: ${first.id}`);
          console.log(`   T√≠tulo: ${first.title}`);
          console.log(`   Destino: ${first.destination}`);
          console.log(`   Pa√≠s: ${first.country}`);
          console.log(`   Datos raw disponibles: ${!!first._raw}`);
        }
        
      } else {
        console.log('‚ùå NO FUNCIONA SIN AUTENTICACI√ìN');
        console.log(`‚ùå ${result.error}`);
        console.log(`‚ùå Intentos: ${result.attempted?.join(', ')}`);
      }

    } catch (error) {
      console.log('üí• ERROR EN MODO SIN AUTH');
      console.log(`üí• ${error.message}`);
    }

    await this.question('\nPresiona Enter para continuar...');
  }

  async analyzeRawResponse() {
    console.log('\nüìä ===============================================');
    console.log('üìä ANALIZANDO RESPUESTA CRUDA');
    console.log('üìä ===============================================');

    try {
      console.log('üîë Primero autenticando...');
      const auth = await tcSafe.authenticate();
      
      if (!auth.success) {
        console.log('‚ùå No se pudo autenticar');
        return;
      }

      console.log('üì° Obteniendo UNA p√°gina cruda...');
      
      // Obtener respuesta cruda directamente
      const result = await tcSafe.getHolidayPackagesPage(tcSafe.authToken, 3, 1);
      
      if (result.success) {
        console.log('‚úÖ ¬°RESPUESTA CRUDA OBTENIDA!');
        console.log(`üìä Paquetes normalizados: ${result.packages.length}`);
        console.log(`üìä Fuente: ${result.source}`);
        
        // Mostrar estructura de primer paquete normalizado
        if (result.packages.length > 0) {
          const first = result.packages[0];
          console.log('\nüìã PAQUETE NORMALIZADO:');
          console.log(JSON.stringify(first, null, 2));
        }
        
      } else {
        console.log('‚ùå Error obteniendo respuesta cruda');
      }

    } catch (error) {
      console.log('üí• ERROR EN AN√ÅLISIS CRUDO');
      console.log(`üí• ${error.message}`);
      
      if (error.response) {
        console.log(`üì° Status: ${error.response.status}`);
        console.log(`üì° Headers:`, error.response.headers);
        console.log(`üì° Data:`, JSON.stringify(error.response.data, null, 2).substring(0, 500));
      }
    }

    await this.question('\nPresiona Enter para continuar...');
  }

  async compareModules() {
    console.log('\nüîÑ ===============================================');
    console.log('üîÑ COMPARANDO M√ìDULOS TC');
    console.log('üîÑ ===============================================');

    console.log('üîß Probando m√≥dulo SAFE...');
    const safeStart = Date.now();
    const safeResult = await tcSafe.getPackages(5);
    const safeDuration = Date.now() - safeStart;

    console.log('üîì Probando m√≥dulo SIMPLE...');
    const simpleStart = Date.now();
    const simpleResult = await tcSimple.getPackages(5);
    const simpleDuration = Date.now() - simpleStart;

    console.log('\nüìä COMPARACI√ìN:');
    console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
    console.log('‚îÇ M√©trica         ‚îÇ SAFE    ‚îÇ SIMPLE  ‚îÇ');
    console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
    console.log(`‚îÇ √âxito           ‚îÇ ${safeResult.success ? '‚úÖ' : '‚ùå'}      ‚îÇ ${simpleResult.success ? '‚úÖ' : '‚ùå'}      ‚îÇ`);
    console.log(`‚îÇ Paquetes        ‚îÇ ${String(safeResult.packages?.length || 0).padEnd(7)} ‚îÇ ${String(simpleResult.packages?.length || 0).padEnd(7)} ‚îÇ`);
    console.log(`‚îÇ Tiempo (ms)     ‚îÇ ${String(safeDuration).padEnd(7)} ‚îÇ ${String(simpleDuration).padEnd(7)} ‚îÇ`);
    console.log(`‚îÇ Fuente          ‚îÇ ${String(safeResult.source || 'N/A').substring(0,7).padEnd(7)} ‚îÇ ${String(simpleResult.source || 'N/A').substring(0,7).padEnd(7)} ‚îÇ`);
    console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');

    if (safeResult.success && safeResult.packages.length > 0) {
      const safeFirst = safeResult.packages[0];
      console.log('\nüìã SAFE - Primer paquete:');
      console.log(`   ${safeFirst.title} | ${safeFirst.country} | $${safeFirst.price?.amount}`);
    }

    if (simpleResult.success && simpleResult.packages.length > 0) {
      const simpleFirst = simpleResult.packages[0];
      console.log('\nüìã SIMPLE - Primer paquete:');
      console.log(`   ${simpleFirst.title} | ${simpleFirst.country} | $${simpleFirst.price?.amount}`);
    }

    await this.question('\nPresiona Enter para continuar...');
  }

  async fullTest() {
    console.log('\nüß™ ===============================================');
    console.log('üß™ TEST COMPLETO DE TRAVEL COMPOSITOR');
    console.log('üß™ ===============================================');

    console.log('üîç Paso 1: Conectividad b√°sica...');
    const connectivity = await tcSimple.testConnection();
    console.log(`   Base URL: ${connectivity.baseUrl ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Packages: ${connectivity.packages ? '‚úÖ' : '‚ùå'}`);
    
    console.log('\nüîë Paso 2: Autenticaci√≥n...');
    const auth = await tcSafe.authenticate();
    console.log(`   Auth: ${auth.success ? '‚úÖ' : '‚ùå'}`);
    
    if (auth.success) {
      console.log('\nüì¶ Paso 3: Obtener paquetes...');
      const packages = await tcSafe.getPackages(10);
      console.log(`   Obtenci√≥n: ${packages.success ? '‚úÖ' : '‚ùå'}`);
      console.log(`   Cantidad: ${packages.packages?.length || 0}`);
      
      if (packages.success && packages.packages.length > 0) {
        console.log('\nüîç Paso 4: An√°lisis de calidad...');
        const withCountry = packages.packages.filter(p => p.country && p.country !== 'Pa√≠s').length;
        const withPrice = packages.packages.filter(p => p.price?.amount > 0).length;
        const withImages = packages.packages.filter(p => p.images?.main).length;
        
        console.log(`   Con pa√≠s v√°lido: ${withCountry}/${packages.packages.length}`);
        console.log(`   Con precio v√°lido: ${withPrice}/${packages.packages.length}`);
        console.log(`   Con imagen: ${withImages}/${packages.packages.length}`);
        
        const qualityScore = ((withCountry + withPrice + withImages) / (packages.packages.length * 3)) * 100;
        console.log(`   üìä Score de calidad: ${Math.round(qualityScore)}%`);
      }
    }

    console.log('\nüéØ RESUMEN:');
    console.log(`   üåê Conectividad: ${connectivity.baseUrl ? 'OK' : 'FAIL'}`);
    console.log(`   üîë Autenticaci√≥n: ${auth.success ? 'OK' : 'FAIL'}`);
    console.log(`   üì¶ Paquetes: ${auth.success && (await tcSafe.getPackages(1)).success ? 'OK' : 'FAIL'}`);

    await this.question('\nPresiona Enter para continuar...');
  }

  async clearCache() {
    console.log('\nüõ†Ô∏è ===============================================');
    console.log('üõ†Ô∏è LIMPIANDO CACHE');
    console.log('üõ†Ô∏è ===============================================');

    try {
      console.log('üóëÔ∏è Limpiando cache de paquetes...');
      
      // Limpiar cache del m√≥dulo safe
      tcSafe.packagesCache.data = [];
      tcSafe.packagesCache.lastUpdate = 0;
      
      // Limpiar token
      tcSafe.authToken = null;
      tcSafe.tokenExpiration = null;
      
      console.log('‚úÖ Cache limpiado exitosamente');
      console.log('   üì¶ Paquetes: ‚úÖ');
      console.log('   üîë Token: ‚úÖ');
      
    } catch (error) {
      console.log('‚ùå Error limpiando cache');
      console.log(`‚ùå ${error.message}`);
    }

    await this.question('\nPresiona Enter para continuar...');
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  const inspector = new TCInspector();
  inspector.start().catch(console.error);
}

module.exports = TCInspector;
