// ===============================================
// SERVIDOR INTERTRAVEL UNIFICADO - POSTGRESQL
// Version: 3.1 POSTGRESQL
// ===============================================

require('dotenv').config();

const express = require('express');
const path = require('path');
const cors = require('cors');
const compression = require('compression');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

// PostgreSQL Database
const { dbManager, query } = require('./database');
const LeadsManager = require('./modules/leads');

// Admin routes
const adminRoutes = require('./routes/admin');

const app = express();
const PORT = process.env.PORT || 3002;

// ======================================
// CONFIGURACI√ìN DE SEGURIDAD B√ÅSICA
// ======================================

// Security headers
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com", "https://cdnjs.cloudflare.com"],
      scriptSrc: ["'self'", "'unsafe-inline'", "https://cdnjs.cloudflare.com"],
      imgSrc: ["'self'", "data:", "https:", "http:"],
      fontSrc: ["'self'", "https://fonts.gstatic.com"],
      connectSrc: ["'self'", "https://online.travelcompositor.com"]
    }
  }
}));

// CORS configurado para WEB + APP
app.use(cors({
  origin: [
    'http://localhost:3005',
    'https://localhost:3005',
    'http://localhost:3000',
    'https://localhost:3000', 
    'capacitor://localhost',
    'ionic://localhost',
    'http://localhost',
    'https://your-domain.com'
  ],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));

// Rate limiting b√°sico
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutos
  max: 1000, // L√≠mite por IP
  message: { error: 'Demasiadas solicitudes, intenta m√°s tarde' }
});
app.use('/api/', limiter);

// Middleware b√°sicos
app.use(compression());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Logging simple
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} ${req.method} ${req.url}`);
  next();
});

// ======================================
// INICIALIZAR BASE DE DATOS
// ======================================

async function initializeDatabase() {
  try {
    console.log('üêò Conectando a PostgreSQL...');
    const connection = await dbManager.connect();
    
    if (connection.success) {
      console.log('‚úÖ PostgreSQL conectado exitosamente');
      
      // Inicializar estructura de BD si es necesario
      const init = await dbManager.initializeDatabase();
      if (init.success) {
        console.log('‚úÖ Base de datos inicializada');
      }
    } else {
      console.log('‚ö†Ô∏è PostgreSQL no disponible, usando fallbacks');
    }
  } catch (error) {
    console.error('‚ùå Error inicializando PostgreSQL:', error.message);
    console.log('‚ö†Ô∏è Continuando con fallbacks...');
  }
}

// ======================================
// TRAVEL COMPOSITOR CONFIGURACI√ìN CORREGIDA
// ======================================

const tcConfig = require('./travel-compositor-safe.js');

// ======================================
// FUNCIONES DE FALLBACK INTELIGENTE
// ======================================

function generateFallbackPackages(count = 6) {
  const baseTemplates = [
    {
      id: 'f2619e65-86c1-43c6-b546-00994fe0ad8c',
      title: 'Per√∫ M√°gico - Cusco y Machu Picchu',
      destination: 'Cusco',
      country: 'Per√∫',
      price: { amount: 1890, currency: 'USD' },
      originalPrice: { amount: 2190, currency: 'USD' },
      duration: { days: 8, nights: 7 },
      category: 'Cultura y Aventura',
      description: {
        short: 'Descubre la magia del imperio Inca en un viaje inolvidable por Cusco, Valle Sagrado y Machu Picchu.',
        full: 'Emb√°rcate en una aventura √∫nica por el coraz√≥n del antiguo imperio Inca. Explora la majestuosa ciudad de Cusco, camina por los senderos sagrados del Valle Sagrado y marav√≠llate con la ciudadela perdida de Machu Picchu.'
      },
      images: {
        main: 'https://images.unsplash.com/photo-1587595431973-160d0d94add1?w=800&h=600&fit=crop&auto=format&q=80'
      },
      rating: { average: 4.8, count: 234 },
      features: ['Vuelos incluidos', 'Alojamiento 4*', 'Gu√≠a especializado', 'Entrada Machu Picchu'],
      featured: true,
      status: 'active',
      _source: 'fallback'
    },
    {
      id: 'c4821f47-92b3-41d7-a856-11203ef1bc9d',
      title: 'Buenos Aires Tango - Capital del Sur',
      destination: 'Buenos Aires',
      country: 'Argentina',
      price: { amount: 899, currency: 'USD' },
      originalPrice: { amount: 1050, currency: 'USD' },
      duration: { days: 6, nights: 5 },
      category: 'Ciudad y Cultura',
      description: {
        short: 'Vive la pasi√≥n del tango en Buenos Aires con shows exclusivos y tours gastron√≥micos.',
        full: 'Sum√©rgete en la cultura porte√±a con shows de tango, tours por San Telmo y La Boca, experiencias gastron√≥micas.'
      },
      images: {
        main: 'https://images.unsplash.com/photo-1589909202802-8f4aadce1849?w=800&h=600&fit=crop&auto=format&q=80'
      },
      rating: { average: 4.6, count: 189 },
      featured: true,
      status: 'active',
      _source: 'fallback'
    },
    {
      id: 'e7934b25-15c8-4f2e-b947-22405da2ef7a',
      title: 'Canc√∫n Paradise - Riviera Maya Todo Incluido',
      destination: 'Canc√∫n',
      country: 'M√©xico',
      price: { amount: 1299, currency: 'USD' },
      duration: { days: 7, nights: 6 },
      category: 'Playa y Relax',
      description: {
        short: 'Para√≠so caribe√±o todo incluido en resort 5 estrellas con playas de arena blanca.',
        full: 'Resort 5 estrellas todo incluido, excursiones a Chich√©n Itz√°, cenotes y actividades acu√°ticas.'
      },
      images: {
        main: 'https://images.unsplash.com/photo-1544551763-46a013bb70d5?w=800&h=600&fit=crop&auto=format&q=80'
      },
      rating: { average: 4.7, count: 156 },
      featured: true,
      status: 'active',
      _source: 'fallback'
    },
    {
      id: 'a1234567-89ab-cdef-1234-567890abcdef',
      title: 'Espa√±a Hist√≥rica - Madrid y Barcelona',
      destination: 'Madrid',
      country: 'Espa√±a',
      price: { amount: 1650, currency: 'USD' },
      duration: { days: 10, nights: 9 },
      category: 'Cultura y Arte',
      description: {
        short: 'Descubre la rica historia de Espa√±a visitando Madrid, Barcelona y sus alrededores.',
        full: 'Tour completo por Espa√±a incluyendo Madrid, Barcelona, museos, gastronom√≠a y cultura espa√±ola.'
      },
      images: {
        main: 'https://images.unsplash.com/photo-1539037116277-4db20889f2d4?w=800&h=600&fit=crop&auto=format&q=80'
      },
      rating: { average: 4.5, count: 198 },
      featured: false,
      status: 'active',
      _source: 'fallback'
    },
    {
      id: 'b2345678-90ab-cdef-2345-678901abcdef',
      title: 'Par√≠s Rom√°ntico - Ciudad de la Luz',
      destination: 'Par√≠s',
      country: 'Francia',
      price: { amount: 1850, currency: 'USD' },
      duration: { days: 7, nights: 6 },
      category: 'Romance y Cultura',
      description: {
        short: 'Vive la magia de Par√≠s con tours por los monumentos m√°s emblem√°ticos.',
        full: 'Tour rom√°ntico por Par√≠s incluyendo Torre Eiffel, Louvre, Champs-√âlys√©es y crucero por el Sena.'
      },
      images: {
        main: 'https://images.unsplash.com/photo-1431274172761-fca41d930114?w=800&h=600&fit=crop&auto=format&q=80'
      },
      rating: { average: 4.9, count: 267 },
      featured: false,
      status: 'draft',
      _source: 'fallback'
    },
    {
      id: 'c3456789-01ab-cdef-3456-789012abcdef',
      title: 'Brasil Carnaval - R√≠o de Janeiro',
      destination: 'R√≠o de Janeiro',
      country: 'Brasil',
      price: { amount: 1420, currency: 'USD' },
      duration: { days: 8, nights: 7 },
      category: 'Fiesta y Cultura',
      description: {
        short: 'Vive el carnaval m√°s famoso del mundo en R√≠o de Janeiro.',
        full: 'Experiencia completa del Carnaval de R√≠o con entradas VIP, shows y tours por la ciudad maravillosa.'
      },
      images: {
        main: 'https://images.unsplash.com/photo-1483729558449-99ef09a8c325?w=800&h=600&fit=crop&auto=format&q=80'
      },
      rating: { average: 4.4, count: 143 },
      featured: false,
      status: 'active',
      _source: 'fallback'
    },
    {
      id: 'd4567890-12ab-cdef-4567-890123abcdef',
      title: 'Jap√≥n Tradicional - Tokio y Kioto',
      destination: 'Tokio',
      country: 'Jap√≥n',
      price: { amount: 2850, currency: 'USD' },
      duration: { days: 12, nights: 11 },
      category: 'Cultura Asi√°tica',
      description: {
        short: 'Descubre la perfecta mezcla entre tradici√≥n y modernidad en Jap√≥n.',
        full: 'Tour por Jap√≥n incluyendo Tokio, Kioto, templos, jardines zen, ceremonia del t√© y cultura japonesa.'
      },
      images: {
        main: 'https://images.unsplash.com/photo-1480796927426-f609979314bd?w=800&h=600&fit=crop&auto=format&q=80'
      },
      rating: { average: 4.8, count: 89 },
      featured: false,
      status: 'inactive',
      _source: 'fallback'
    },
    {
      id: 'e5678901-23ab-cdef-5678-901234abcdef',
      title: 'Egipto Milenario - Cairo y Crucero Nilo',
      destination: 'Cairo',
      country: 'Egipto',
      price: { amount: 1950, currency: 'USD' },
      duration: { days: 9, nights: 8 },
      category: 'Historia Antigua',
      description: {
        short: 'Explora los misterios del antiguo Egipto con las pir√°mides y crucero por el Nilo.',
        full: 'Aventura por Egipto incluyendo Pir√°mides de Giza, Esfinge, crucero por el Nilo y templos fara√≥nicos.'
      },
      images: {
        main: 'https://images.unsplash.com/photo-1539650116574-75c0c6d73dd6?w=800&h=600&fit=crop&auto=format&q=80'
      },
      rating: { average: 4.6, count: 112 },
      featured: false,
      status: 'active',
      _source: 'fallback'
    }
  ];
  
  // Si necesitamos m√°s paquetes, generar variaciones
  const packages = [...baseTemplates];
  
  if (count > baseTemplates.length) {
    const additionalCount = count - baseTemplates.length;
    const countries = ['Italia', 'Grecia', 'Tailandia', 'Chile', 'Colombia', 'Costa Rica', 'Portugal', 'Alemania'];
    const categories = ['Aventura', 'Relax', 'Gastron√≥mico', 'Fotogr√°fico', 'Familiar'];
    const statuses = ['active', 'draft', 'inactive'];
    
    for (let i = 0; i < additionalCount; i++) {
      const country = countries[i % countries.length];
      const category = categories[i % categories.length];
      const status = statuses[i % statuses.length];
      const price = 800 + (i * 150) + Math.floor(Math.random() * 500);
      
      packages.push({
        id: `gen-${Date.now()}-${i}`,
        title: `${country} ${category} - Experiencia √önica`,
        destination: country === 'Italia' ? 'Roma' : country === 'Grecia' ? 'Atenas' : country,
        country: country,
        price: { amount: price, currency: 'USD' },
        duration: { days: 5 + (i % 7), nights: 4 + (i % 7) },
        category: category,
        description: {
          short: `Descubre lo mejor de ${country} en una experiencia ${category.toLowerCase()} inolvidable.`,
          full: `Paquete completo para conocer ${country} con las mejores atracciones y experiencias ${category.toLowerCase()}.`
        },
        images: {
          main: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=800&h=600&fit=crop&auto=format&q=80'
        },
        rating: { average: 4.0 + (Math.random() * 1), count: 50 + Math.floor(Math.random() * 200) },
        featured: Math.random() > 0.7,
        status: status,
        _source: 'fallback-generated'
      });
    }
  }
  
  return packages.slice(0, count);
}

// ======================================
// RUTAS API UNIFICADAS
// ======================================

// Health check
app.get('/api/health', async (req, res) => {
  try {
    // Test Travel Compositor
    let tcStatus = 'disconnected';
    try {
      const testResult = await tcConfig.getPackages(1);
      tcStatus = testResult.success ? 'connected' : 'disconnected';
    } catch (error) {
      tcStatus = 'error';
    }
    
    res.json({
      success: true,
      status: 'healthy',
      timestamp: new Date().toISOString(),
      server: {
        name: 'InterTravel Unified Backend',
        version: '3.0',
        environment: process.env.NODE_ENV || 'development',
        port: PORT,
        uptime: Math.floor(process.uptime())
      },
      services: {
        travelCompositor: {
          status: tcStatus,
          endpoint: tcConfig.apiUrl
        }
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Paquetes destacados - P√öBLICA
app.get('/api/packages/featured', async (req, res) => {
  try {
    const limit = parseInt(req.query.limit) || 6;
    console.log(`üåü Solicitando ${limit} paquetes destacados`);
    
    // Intentar Travel Compositor primero
    let packages = [];
    let source = 'unknown';
    
    const tcResult = await tcConfig.getPackages(limit);
    if (tcResult.success && tcResult.packages && tcResult.packages.length > 0) {
      packages = tcResult.packages;
      source = 'travel-compositor';
      console.log(`‚úÖ Travel Compositor: ${packages.length} paquetes obtenidos`);
    } else {
      // Usar fallback
      packages = generateFallbackPackages(limit);
      source = 'fallback';
      console.log(`‚úÖ Fallback: ${packages.length} paquetes generados`);
    }
    
    res.json({
      success: true,
      packages: packages,
      total: packages.length,
      _source: source
    });
    
  } catch (error) {
    console.error('‚ùå Error obteniendo paquetes destacados:', error);
    
    // Fallback de emergencia
    const emergencyPackages = generateFallbackPackages(parseInt(req.query.limit) || 6);
    res.json({
      success: true,
      packages: emergencyPackages,
      total: emergencyPackages.length,
      _source: 'emergency-fallback'
    });
  }
});

// B√∫squeda de paquetes - P√öBLICA
app.get('/api/packages/search', async (req, res) => {
  try {
    const { destination, startDate, endDate, adults, page = 1, pageSize = 12 } = req.query;
    
    console.log('üîç B√∫squeda de paquetes:', { destination, page, pageSize });
    
    let results = [];
    let source = 'unknown';
    
    // Buscar en Travel Compositor
    if (destination) {
      const tcResult = await tcConfig.searchPackages({
        destination: destination,
        startDate: startDate,
        endDate: endDate,
        adults: adults,
        page: page,
        limit: pageSize
      });
      
      if (tcResult.success && tcResult.packages && tcResult.packages.length > 0) {
        results = tcResult.packages;
        source = 'travel-compositor';
        console.log(`‚úÖ TC: ${results.length} resultados encontrados`);
      }
    }
    
    // Si no hay resultados, usar fallback con filtros
    if (results.length === 0 && destination) {
      const fallbackPackages = generateFallbackPackages(12);
      results = fallbackPackages.filter(pkg => 
        pkg.destination.toLowerCase().includes(destination.toLowerCase()) ||
        pkg.country.toLowerCase().includes(destination.toLowerCase()) ||
        pkg.title.toLowerCase().includes(destination.toLowerCase())
      );
      source = 'fallback-filtered';
    }
    
    res.json({
      success: true,
      data: results,
      pagination: {
        page: parseInt(page),
        pageSize: parseInt(pageSize),
        total: results.length,
        totalPages: Math.ceil(results.length / parseInt(pageSize))
      },
      _source: source
    });
    
  } catch (error) {
    console.error('‚ùå Error en b√∫squeda:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Detalles de paquete - P√öBLICA
app.get('/api/packages/:id', async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üì¶ Obteniendo paquete: ${id}`);
    
    // Buscar en Travel Compositor
    const tcResult = await tcConfig.getPackageDetails(id);
    if (tcResult.success && tcResult.package) {
      return res.json({
        success: true,
        package: tcResult.package,
        _source: 'travel-compositor'
      });
    }
    
    // Buscar en fallback
    const fallbackPackages = generateFallbackPackages(20);
    const fallbackPackage = fallbackPackages.find(pkg => pkg.id === id);
    
    if (fallbackPackage) {
      return res.json({
        success: true,
        package: fallbackPackage,
        _source: 'fallback'
      });
    }
    
    res.status(404).json({
      success: false,
      error: 'Paquete no encontrado',
      packageId: id
    });
    
  } catch (error) {
    console.error('‚ùå Error obteniendo paquete:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Pre-booking - P√öBLICA
app.post('/api/packages/prebooking', async (req, res) => {
  try {
    const { 
      packageId, 
      customerName, 
      customerEmail, 
      customerPhone, 
      travelers, 
      specialRequests,
      preferredDate 
    } = req.body;
    
    console.log('üìù Nueva pre-reserva:', { packageId, customerEmail });
    
    // Validaciones b√°sicas
    if (!packageId || !customerName || !customerEmail) {
      return res.status(400).json({
        success: false,
        error: 'Datos requeridos: packageId, customerName, customerEmail'
      });
    }
    
    // Obtener detalles del paquete
    const packageDetails = await tcConfig.getPackageDetails(packageId);
    let packageInfo = null;
    
    if (packageDetails.success) {
      packageInfo = packageDetails.package;
    } else {
      // Buscar en fallback
      const fallbackPackages = generateFallbackPackages(20);
      packageInfo = fallbackPackages.find(pkg => pkg.id === packageId);
    }
    
    // Crear objeto de pre-reserva
    const prebooking = {
      id: `PB-${Date.now()}`,
      packageId,
      packageTitle: packageInfo?.title || 'Paquete',
      customer: {
        name: customerName,
        email: customerEmail,
        phone: customerPhone
      },
      travelers: travelers || 1,
      specialRequests: specialRequests || '',
      preferredDate: preferredDate || '',
      status: 'pending',
      createdAt: new Date().toISOString(),
      source: 'web'
    };
    
    // Simular env√≠o de email (en producci√≥n conectar con servicio real)
    console.log('üìß Enviando notificaci√≥n por email...');
    
    // Simular env√≠o por WhatsApp (en producci√≥n conectar con API)
    console.log('üì± Enviando notificaci√≥n por WhatsApp...');
    
    res.json({
      success: true,
      prebooking: prebooking,
      message: 'Pre-reserva creada exitosamente. Te contactaremos pronto.'
    });
    
  } catch (error) {
    console.error('‚ùå Error creando pre-reserva:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Configuraci√≥n de contacto - P√öBLICA
app.get('/api/config/contact', (req, res) => {
  res.json({
    success: true,
    contact: {
      phone: '+54 261 XXX-XXXX',
      email: 'ventas@intertravel.com.ar',
      whatsapp: '+54 9 261 XXX-XXXX',
      address: 'Chacras Park, Edificio Ceibo, Luj√°n de Cuyo, Mendoza',
      offices: ['Of. 105', 'Of. 307', 'Of. 404', 'Of. 405'],
      socialMedia: {
        instagram: '@intertravelgroup',
        facebook: 'InterTravelGroup',
        linkedin: 'intertravel-group'
      },
      businessHours: {
        weekdays: '09:00 - 18:00',
        saturday: '09:00 - 13:00',
        sunday: 'Cerrado'
      }
    }
  });
});

// ======================================
// ENDPOINT PARA CAPTURA DE LEADS
// ======================================

// Capturar leads del modal de email - POSTGRESQL INTEGRADO
app.post('/api/leads/capture', async (req, res) => {
  try {
    const { email, source, location, timestamp } = req.body;
    
    console.log(`üìß Nueva captura de lead: ${email} desde ${source}`);
    
    // Validaciones
    if (!email || !email.includes('@')) {
      return res.status(400).json({
        success: false,
        error: 'Email v√°lido requerido'
      });
    }
    
    // Usar LeadsManager para capturar el lead
    const leadData = {
      email: email.toLowerCase().trim(),
      source: source || 'unknown',
      location: location || 'Unknown',
      metadata: {
        ip: req.ip,
        userAgent: req.get('User-Agent')?.substring(0, 200),
        referer: req.get('Referer'),
        timestamp: timestamp || new Date().toISOString()
      }
    };
    
    const result = await LeadsManager.captureLead(leadData);
    
    if (result.success) {
      console.log('üíæ Lead guardado en PostgreSQL:', result.lead.id);
      
      res.json({
        success: true,
        data: {
          leadId: result.lead.id,
          email: result.lead.email,
          discount: '15%',
          message: 'Lead capturado exitosamente'
        }
      });
    } else {
      // Fallback si falla PostgreSQL
      console.log('‚ö†Ô∏è Fallback: PostgreSQL no disponible para leads');
      
      res.json({
        success: true,
        data: {
          leadId: `fallback-${Date.now()}`,
          email: leadData.email,
          discount: '15%',
          message: 'Lead capturado exitosamente (fallback)'
        }
      });
    }
    
  } catch (error) {
    console.error('‚ùå Error capturando lead:', error);
    res.status(500).json({
      success: false,
      error: 'Error interno del servidor'
    });
  }
});

// ======================================
// RUTAS ADMIN CON POSTGRESQL
// ======================================

// Usar rutas admin
app.use('/api/admin', adminRoutes);

// Endpoint para obtener estad√≠sticas de leads (admin)
app.get('/api/admin/leads/stats', async (req, res) => {
  try {
    const authHeader = req.get('Authorization');
    if (!authHeader) {
      return res.status(401).json({ success: false, error: 'Authorization required' });
    }
    
    const result = await LeadsManager.getStats();
    res.json(result);
    
  } catch (error) {
    console.error('‚ùå Error obteniendo stats de leads:', error);
    res.status(500).json({
      success: false,
      error: 'Error interno del servidor'
    });
  }
});

// Endpoint para obtener leads (admin)
app.get('/api/admin/leads', async (req, res) => {
  try {
    const authHeader = req.get('Authorization');
    if (!authHeader) {
      return res.status(401).json({ success: false, error: 'Authorization required' });
    }
    
    const result = await LeadsManager.getLeads(req.query);
    
    if (result.success) {
      res.json({
        success: true,
        data: result.data.leads,
        pagination: result.data.pagination
      });
    } else {
      res.status(500).json(result);
    }
    
  } catch (error) {
    console.error('‚ùå Error obteniendo leads:', error);
    res.status(500).json({
      success: false,
      error: 'Error interno del servidor'
    });
  }
});

// ======================================
// HEALTH CHECK CON POSTGRESQL
// ======================================

// Health check
app.get('/api/health', async (req, res) => {
  try {
    // Test PostgreSQL
    let dbStatus = 'disconnected';
    let dbHealth = null;
    
    try {
      const dbStatusCheck = dbManager.getStatus();
      const healthCheck = await dbManager.healthCheck();
      
      dbStatus = dbStatusCheck.connected ? 'connected' : 'disconnected';
      dbHealth = healthCheck;
    } catch (error) {
      dbStatus = 'error';
    }
    
    // Test Travel Compositor
    let tcStatus = 'disconnected';
    try {
      const testResult = await tcConfig.getPackages(1);
      tcStatus = testResult.success ? 'connected' : 'disconnected';
    } catch (error) {
      tcStatus = 'error';
    }
    
    res.json({
      success: true,
      status: 'healthy',
      timestamp: new Date().toISOString(),
      server: {
        name: 'InterTravel Unified Backend PostgreSQL',
        version: '3.1',
        environment: process.env.NODE_ENV || 'development',
        port: PORT,
        uptime: Math.floor(process.uptime())
      },
      services: {
        postgresql: {
          status: dbStatus,
          health: dbHealth,
          environment: dbManager.getStatus()?.environment
        },
        travelCompositor: {
          status: tcStatus,
          endpoint: tcConfig.apiUrl
        }
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// ======================================
// SISTEMA DE NOTIFICACIONES EN TIEMPO REAL
// ======================================

// Simular notificaciones de reservas recientes
app.get('/api/notifications/recent-bookings', async (req, res) => {
  try {
    const recentBookings = [
      {
        id: 'booking-001',
        customerName: 'Mar√≠a G.',
        destination: 'Canc√∫n',
        timeAgo: Math.floor(Math.random() * 30) + 1,
        amount: 1650
      },
      {
        id: 'booking-002', 
        customerName: 'Carlos R.',
        destination: 'Per√∫',
        timeAgo: Math.floor(Math.random() * 30) + 1,
        amount: 1890
      },
      {
        id: 'booking-003',
        customerName: 'Ana L.',
        destination: 'Europa', 
        timeAgo: Math.floor(Math.random() * 30) + 1,
        amount: 2850
      }
    ];
    
    // Randomizar el orden
    const shuffled = recentBookings.sort(() => 0.5 - Math.random());
    
    res.json({
      success: true,
      data: shuffled.slice(0, 3),
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå Error obteniendo notificaciones:', error);
    res.status(500).json({
      success: false,
      error: 'Error interno del servidor'
    });
  }
});

// Contador de visitantes en tiempo real
app.get('/api/stats/visitors', async (req, res) => {
  try {
    const baseVisitors = 845;
    const currentVisitors = baseVisitors + Math.floor(Math.random() * 20);
    
    res.json({
      success: true,
      data: {
        current: currentVisitors,
        today: Math.floor(currentVisitors * 15.7),
        thisWeek: Math.floor(currentVisitors * 89.3)
      },
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Error obteniendo visitantes'
    });
  }
});

// Perfil de usuario - APP
app.get('/api/mobile/profile/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    
    // Simular datos de usuario
    const userProfile = {
      id: userId,
      name: 'Cliente Ejemplo',
      email: 'cliente@example.com',
      phone: '+54 9 261 XXX-XXXX',
      loyaltyLevel: 'Gold',
      points: 2847,
      totalTrips: 5,
      joinDate: '2023-01-15',
      preferences: {
        destinations: ['Europa', 'Asia'],
        travelStyle: 'Aventura',
        budgetRange: 'Premium'
      }
    };
    
    res.json({
      success: true,
      profile: userProfile
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Estado de viaje - APP
app.get('/api/mobile/trip-status/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    
    // Simular estado de viaje
    const tripStatus = {
      hasActiveTrip: true,
      currentTrip: {
        id: 'T-2024-001',
        destination: 'Buenos Aires',
        status: 'confirmed',
        departureDate: '2024-07-15',
        returnDate: '2024-07-20',
        progress: 75,
        nextEvent: {
          type: 'flight',
          description: 'Vuelo de regreso AR1234',
          datetime: '2024-07-20T14:30:00Z'
        },
        documents: [
          { type: 'ticket', name: 'Voucher de Hotel', ready: true },
          { type: 'itinerary', name: 'Itinerario Completo', ready: true },
          { type: 'insurance', name: 'Seguro de Viaje', ready: true }
        ]
      },
      upcomingTrips: [],
      pastTrips: 4
    };
    
    res.json({
      success: true,
      tripStatus: tripStatus
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Notificaciones push - APP
app.post('/api/mobile/register-push', async (req, res) => {
  try {
    const { userId, pushToken, platform } = req.body;
    
    console.log('üì± Registrando token push:', { userId, platform });
    
    // En producci√≥n: guardar en base de datos
    res.json({
      success: true,
      message: 'Token push registrado exitosamente'
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// ======================================
// SISTEMA DE AUTENTICACI√ìN ADMIN
// ======================================

// Simulaci√≥n de tokens (en producci√≥n usar JWT real)
const adminTokens = new Map();

// Middleware de autenticaci√≥n admin
function requireAdminAuth(req, res, next) {
  const authHeader = req.get('Authorization');
  const token = authHeader && authHeader.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({
      success: false,
      error: 'Token de acceso requerido'
    });
  }
  
  const user = adminTokens.get(token);
  if (!user) {
    return res.status(401).json({
      success: false,
      error: 'Token inv√°lido'
    });
  }
  
  req.user = user;
  next();
}

// ======================================
// RUTAS ADMIN COMPLETAS
// ======================================

// Login admin
app.post('/api/admin/login', async (req, res) => {
  try {
    const { username, password } = req.body;
    
    console.log(`üîê Intento de login admin: ${username}`);
    
    // Credenciales de desarrollo
    const validCredentials = {
      'admin': { password: 'admin123', role: 'super_admin', name: 'Administrador Principal' },
      'intertravel': { password: 'travel2024', role: 'admin', name: 'Administrador InterTravel' },
      'demo': { password: 'demo123', role: 'admin', name: 'Usuario Demo' }
    };
    
    const userConfig = validCredentials[username];
    
    if (userConfig && userConfig.password === password) {
      const token = `admin-token-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
      const user = {
        username: username,
        name: userConfig.name,
        role: userConfig.role,
        permissions: ['dashboard:view', 'packages:manage', 'bookings:view', 'system:view'],
        loginTime: new Date().toISOString()
      };
      
      // Guardar token (en producci√≥n usar base de datos)
      adminTokens.set(token, user);
      
      console.log(`‚úÖ Login admin exitoso: ${username}`);
      
      res.json({
        success: true,
        user: user,
        token: token,
        message: 'Autenticaci√≥n exitosa'
      });
    } else {
      console.log(`‚ùå Login admin fallido: ${username}`);
      res.status(401).json({
        success: false,
        error: 'Credenciales incorrectas'
      });
    }
    
  } catch (error) {
    console.error('‚ùå Error en login admin:', error);
    res.status(500).json({
      success: false,
      error: 'Error interno del servidor'
    });
  }
});

// Logout admin
app.post('/api/admin/logout', requireAdminAuth, async (req, res) => {
  try {
    const authHeader = req.get('Authorization');
    const token = authHeader && authHeader.split(' ')[1];
    
    adminTokens.delete(token);
    
    res.json({
      success: true,
      message: 'Sesi√≥n cerrada exitosamente'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Verificar token admin
app.get('/api/admin/verify', requireAdminAuth, async (req, res) => {
  res.json({
    success: true,
    user: req.user,
    valid: true
  });
});

// Stats del dashboard
app.get('/api/admin/stats', requireAdminAuth, async (req, res) => {
  try {
    console.log(`üìä Admin obteniendo stats - Usuario: ${req.user.username}`);
    
    // Simular datos m√°s realistas con variaci√≥n
    const baseStats = {
      totalBookings: 145,
      monthlyRevenue: 186500,
      activePackages: 23,
      conversionRate: 23.8,
      newCustomersThisMonth: 12,
      avgOrderValue: 1850,
      repeatCustomers: 34
    };
    
    // Agregar variaci√≥n para simular datos en tiempo real
    const variation = () => Math.floor(Math.random() * 10) - 5;
    
    const stats = {
      totalBookings: baseStats.totalBookings + variation(),
      monthlyRevenue: baseStats.monthlyRevenue + (variation() * 1000),
      activePackages: baseStats.activePackages,
      conversionRate: (baseStats.conversionRate + (variation() * 0.5)).toFixed(1),
      newCustomersThisMonth: baseStats.newCustomersThisMonth + variation(),
      avgOrderValue: baseStats.avgOrderValue + (variation() * 50),
      repeatCustomers: baseStats.repeatCustomers + variation(),
      recentActivity: [
        {
          id: 1,
          type: 'booking',
          message: 'Nueva reserva para Per√∫ M√°gico - Cusco',
          details: 'Cliente: Mar√≠a Garc√≠a - $1,890 USD',
          time: '2 minutos ago',
          timestamp: new Date(Date.now() - 2 * 60 * 1000)
        },
        {
          id: 2,
          type: 'quote',
          message: 'Cotizaci√≥n enviada Buenos Aires Cultural',
          details: 'Cliente: Carlos L√≥pez - $1,250 USD',
          time: '5 minutos ago',
          timestamp: new Date(Date.now() - 5 * 60 * 1000)
        },
        {
          id: 3,
          type: 'search',
          message: 'B√∫squeda popular: Canc√∫n Todo Incluido',
          details: 'Filtros: 2 adultos, 7 d√≠as',
          time: '8 minutos ago',
          timestamp: new Date(Date.now() - 8 * 60 * 1000)
        },
        {
          id: 4,
          type: 'user',
          message: 'Nuevo usuario registrado',
          details: 'Email: ana.rodriguez@email.com',
          time: '12 minutos ago',
          timestamp: new Date(Date.now() - 12 * 60 * 1000)
        },
        {
          id: 5,
          type: 'payment',
          message: 'Pago confirmado - Espa√±a Hist√≥rica',
          details: 'Booking #BK-2024-089 - $2,150 USD',
          time: '18 minutos ago',
          timestamp: new Date(Date.now() - 18 * 60 * 1000)
        }
      ],
      trends: {
        bookingsGrowth: '+12.5%',
        revenueGrowth: '+8.3%',
        conversionGrowth: '+2.1%',
        userGrowth: '+15.7%'
      },
      alerts: [
        {
          type: 'success',
          message: 'Ventas este mes superaron el objetivo en 23%',
          icon: 'trending-up'
        },
        {
          type: 'warning',
          message: '3 paquetes con bajo stock necesitan atenci√≥n',
          icon: 'alert-triangle'
        },
        {
          type: 'info',
          message: 'Nueva integraci√≥n con MercadoPago completada',
          icon: 'info'
        }
      ]
    };
    
    res.json({
      success: true,
      stats: stats,
      timestamp: new Date().toISOString(),
      _cached: false
    });
    
  } catch (error) {
    console.error('‚ùå Error obteniendo stats admin:', error);
    res.status(500).json({
      success: false,
      error: 'Error interno del servidor'
    });
  }
});

// Charts para dashboard
app.get('/api/admin/charts', requireAdminAuth, async (req, res) => {
  try {
    const { chart, period = '7d' } = req.query;
    
    console.log(`üìà Admin obteniendo charts - Usuario: ${req.user.username}`, { chart, period });
    
    const chartData = {
      sales: {
        daily: [
          { name: 'Lun', ventas: 12000, reservas: 8 },
          { name: 'Mar', ventas: 19000, reservas: 12 },
          { name: 'Mi√©', ventas: 15000, reservas: 10 },
          { name: 'Jue', ventas: 22000, reservas: 15 },
          { name: 'Vie', ventas: 18000, reservas: 11 },
          { name: 'S√°b', ventas: 24000, reservas: 16 },
          { name: 'Dom', ventas: 16000, reservas: 9 }
        ],
        monthly: [
          { name: 'Ene', ventas: 120000, reservas: 85 },
          { name: 'Feb', ventas: 140000, reservas: 95 },
          { name: 'Mar', ventas: 180000, reservas: 125 },
          { name: 'Abr', ventas: 160000, reservas: 110 },
          { name: 'May', ventas: 200000, reservas: 140 },
          { name: 'Jun', ventas: 190000, reservas: 135 }
        ]
      },
      destinations: [
        { name: 'Per√∫', value: 35, color: '#667eea' },
        { name: 'Argentina', value: 28, color: '#764ba2' },
        { name: 'M√©xico', value: 22, color: '#f093fb' },
        { name: 'Espa√±a', value: 10, color: '#10b981' },
        { name: 'Francia', value: 5, color: '#f59e0b' }
      ],
      conversion: [
        { name: 'Ene', conversion: 18.5, visitas: 2400 },
        { name: 'Feb', conversion: 21.2, visitas: 2800 },
        { name: 'Mar', conversion: 23.8, visitas: 3200 },
        { name: 'Abr', conversion: 20.1, visitas: 2900 },
        { name: 'May', conversion: 25.4, visitas: 3600 },
        { name: 'Jun', conversion: 23.8, visitas: 3400 }
      ]
    };
    
    let response = chartData;
    if (chart) {
      response = { [chart]: chartData[chart] };
    }
    
    res.json({
      success: true,
      data: response,
      period,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå Error obteniendo charts admin:', error);
    res.status(500).json({
      success: false,
      error: 'Error interno del servidor'
    });
  }
});

// Gesti√≥n de paquetes admin
app.get('/api/admin/packages', requireAdminAuth, async (req, res) => {
  try {
    const {
      search,
      country,
      status,
      featured,
      page = 1,
      limit = 20
    } = req.query;
    
    console.log(`üì¶ Admin obteniendo paquetes - Usuario: ${req.user.username}`);
    
    // Obtener paquetes base
    let packages = generateFallbackPackages(30); // M√°s paquetes para admin
    
    // Aplicar filtros
    if (search) {
      packages = packages.filter(pkg => 
        pkg.title.toLowerCase().includes(search.toLowerCase()) ||
        pkg.destination.toLowerCase().includes(search.toLowerCase()) ||
        pkg.country.toLowerCase().includes(search.toLowerCase())
      );
    }
    
    if (country) {
      packages = packages.filter(pkg => pkg.country.toLowerCase().includes(country.toLowerCase()));
    }
    
    if (status) {
      packages = packages.filter(pkg => (pkg.status || 'active') === status);
    }
    
    if (featured !== undefined) {
      packages = packages.filter(pkg => pkg.featured === (featured === 'true'));
    }
    
    // Paginaci√≥n
    const offset = (page - 1) * limit;
    const paginatedPackages = packages.slice(offset, offset + parseInt(limit));
    
    res.json({
      success: true,
      packages: paginatedPackages,
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit),
        total: packages.length,
        totalPages: Math.ceil(packages.length / limit)
      },
      filters: { search, country, status, featured },
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå Error obteniendo paquetes admin:', error);
    res.status(500).json({
      success: false,
      error: 'Error interno del servidor'
    });
  }
});

// Actualizar estado de paquete
app.patch('/api/admin/packages/:id/status', requireAdminAuth, async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;
    
    const validStatuses = ['active', 'inactive', 'draft', 'archived'];
    if (!validStatuses.includes(status)) {
      return res.status(400).json({
        success: false,
        error: 'Estado inv√°lido'
      });
    }
    
    console.log(`üì¶ Admin cambiando estado paquete ${id} a ${status} - Usuario: ${req.user.username}`);
    
    // En producci√≥n aqu√≠ ir√≠a la actualizaci√≥n real en base de datos
    res.json({
      success: true,
      data: {
        id,
        status,
        updated_by: req.user.username,
        updated_at: new Date().toISOString()
      },
      message: `Estado cambiado a ${status}`,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå Error cambiando estado paquete:', error);
    res.status(500).json({
      success: false,
      error: 'Error interno del servidor'
    });
  }
});

// Estad√≠sticas de paquetes
app.get('/api/admin/packages/stats', requireAdminAuth, async (req, res) => {
  try {
    const packages = generateFallbackPackages(50);
    
    const stats = {
      total: packages.length,
      active: packages.filter(p => (p.status || 'active') === 'active').length,
      draft: packages.filter(p => (p.status || 'active') === 'draft').length,
      featured: packages.filter(p => p.featured).length,
      byCountry: packages.reduce((acc, pkg) => {
        acc[pkg.country] = (acc[pkg.country] || 0) + 1;
        return acc;
      }, {}),
      avgPrice: Math.round(packages.reduce((sum, pkg) => sum + pkg.price.amount, 0) / packages.length),
      priceRange: {
        min: Math.min(...packages.map(p => p.price.amount)),
        max: Math.max(...packages.map(p => p.price.amount))
      }
    };
    
    res.json({
      success: true,
      data: stats,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå Error obteniendo stats paquetes:', error);
    res.status(500).json({
      success: false,
      error: 'Error interno del servidor'
    });
  }
});

// Actividad del sistema
app.get('/api/admin/activity', requireAdminAuth, async (req, res) => {
  try {
    const { limit = 20, type, priority } = req.query;
    
    let activities = [
      {
        id: 'act_001',
        type: 'booking',
        text: 'Nueva reserva para Per√∫ M√°gico - Cusco',
        details: 'Cliente: Mar√≠a Garc√≠a - $1,890 USD',
        time: 'Hace 8 minutos',
        priority: 'high',
        timestamp: new Date(Date.now() - 8 * 60 * 1000)
      },
      {
        id: 'act_002',
        type: 'quote',
        text: 'Cotizaci√≥n enviada para Buenos Aires Cultural',
        details: 'Cliente: Carlos L√≥pez - $1,250 USD',
        time: 'Hace 25 minutos',
        priority: 'medium',
        timestamp: new Date(Date.now() - 25 * 60 * 1000)
      },
      {
        id: 'act_003',
        type: 'user',
        text: 'Nuevo usuario registrado',
        details: 'Email: ana.rodriguez@email.com',
        time: 'Hace 1 hora',
        priority: 'low',
        timestamp: new Date(Date.now() - 60 * 60 * 1000)
      },
      {
        id: 'act_004',
        type: 'payment',
        text: 'Pago confirmado - Canc√∫n Para√≠so',
        details: 'Booking #BK-2024-045 - $1,650 USD',
        time: 'Hace 2 horas',
        priority: 'high',
        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000)
      },
      {
        id: 'act_005',
        type: 'package',
        text: 'Paquete "Espa√±a Hist√≥rica" actualizado',
        details: 'Cambios en precios y disponibilidad',
        time: 'Hace 3 horas',
        priority: 'medium',
        timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000)
      }
    ];
    
    // Filtros
    if (type) {
      activities = activities.filter(activity => activity.type === type);
    }
    
    if (priority) {
      activities = activities.filter(activity => activity.priority === priority);
    }
    
    activities = activities.slice(0, parseInt(limit));
    
    res.json({
      success: true,
      data: activities,
      filters: { limit, type, priority },
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå Error obteniendo actividad:', error);
    res.status(500).json({
      success: false,
      error: 'Error interno del servidor'
    });
  }
});

// ======================================
// SERVIR ARCHIVOS EST√ÅTICOS
// ======================================

const isDevelopment = process.env.NODE_ENV !== 'production';

if (!isDevelopment) {
  // Solo en producci√≥n servir archivos est√°ticos
  const frontendPath = path.join(__dirname, '../frontend/out');
  
  // Verificar si existe la carpeta out
  const fs = require('fs');
  if (fs.existsSync(frontendPath)) {
    console.log('üìÅ Sirviendo frontend desde:', frontendPath);
    
    // Frontend de Next.js (cuando est√© built)
    app.use(express.static(frontendPath, {
      maxAge: '1d',
      etag: true
    }));
    
    // Fallback para SPA routing
    app.get('*', (req, res) => {
      // Si es una ruta de API que no existe
      if (req.path.startsWith('/api/')) {
        return res.status(404).json({
          success: false,
          error: 'Endpoint no encontrado'
        });
      }
      
      // Para rutas del frontend, servir index.html
      res.sendFile(path.join(frontendPath, 'index.html'));
    });
  } else {
    console.log('‚ö†Ô∏è No se encontr√≥ carpeta out, necesitas hacer build del frontend');
  }
} else {
  console.log('üîß Modo desarrollo: Frontend debe correr en puerto 3000');
}

// Admin panel (siempre disponible)
const adminPath = path.join(__dirname, '../admin');
const fs = require('fs');
if (fs.existsSync(adminPath)) {
  app.use('/admin', express.static(adminPath, {
    maxAge: '1h'
  }));
}

// 404 para rutas de API que no existen
app.use('/api/*', (req, res) => {
  res.status(404).json({
    success: false,
    error: 'Endpoint no encontrado',
    path: req.path
  });
});

// En desarrollo, informar sobre frontend separado
if (isDevelopment) {
  app.get('*', (req, res) => {
  res.json({
  message: 'InterTravel Backend API',
  frontend: 'http://localhost:3005',
  admin: `http://localhost:${PORT}/admin`,
  health: `http://localhost:${PORT}/api/health`,
  packages: `http://localhost:${PORT}/api/packages/featured`
  });
  });
}

// ======================================
// INICIALIZACI√ìN DEL SERVIDOR
// ======================================

async function startServer() {
  try {
    console.log('üöÄ Inicializando servicios...');
    
    // Inicializar PostgreSQL primero
    await initializeDatabase();
    
    // Probar conectividad con Travel Compositor (en background)
    console.log('üîç Probando Travel Compositor...');
    tcConfig.tryAuthentication(); // SIN await - no bloquea
    
    const server = app.listen(PORT, () => {
      console.log('üöÄ ===============================================');
      console.log(`üöÄ INTERTRAVEL POSTGRESQL SERVER - Puerto ${PORT}`);
      console.log(`üöÄ Entorno: ${process.env.NODE_ENV || 'development'}`);
      console.log('üöÄ ===============================================');
      console.log('üêò BASE DE DATOS:');
      console.log('   ‚úÖ PostgreSQL integrado');
      console.log('   ‚úÖ Leads, Packages, Bookings');
      console.log('   ‚úÖ Admin authentication');
      console.log('üì± APLICACI√ìN M√ìVIL:');
      console.log('   ‚úÖ Capacitor configurado');
      console.log('   ‚úÖ APIs m√≥viles disponibles');
      console.log('   ‚úÖ Push notifications ready');
      console.log('üåê APLICACI√ìN WEB:');
      console.log(isDevelopment ? '   üîß Frontend: http://localhost:3005 (desarrollo)' : '   ‚úÖ Frontend integrado');
      console.log('   ‚úÖ API unificada');
      console.log('   ‚úÖ Travel Compositor integrado');
      console.log('üîß PANEL ADMIN:');
      console.log('   ‚úÖ Dashboard con PostgreSQL');
      console.log('   ‚úÖ Gesti√≥n completa de leads');
      console.log('   ‚úÖ Gesti√≥n de paquetes y reservas');
      console.log('   ‚úÖ Testing y deploy integrado');
      console.log('üí° URLs PRINCIPALES:');
      console.log(`   üåê Web: http://localhost:${PORT}`);
      console.log(`   üìä Health: http://localhost:${PORT}/api/health`);
      console.log(`   ‚≠ê Destacados: http://localhost:${PORT}/api/packages/featured`);
      console.log(`   üîß Admin: http://localhost:${PORT}/admin`);
      console.log(`   üìä Admin API: http://localhost:${PORT}/api/admin/stats`);
      console.log('üöÄ ===============================================');
    });
    
    // Graceful shutdown
    process.on('SIGTERM', async () => {
      console.log('üõë Cerrando servidor...');
      await dbManager.disconnect();
      server.close(() => {
        console.log('‚úÖ Servidor cerrado');
        process.exit(0);
      });
    });
    
  } catch (error) {
    console.error('‚ùå Error iniciando servidor:', error);
    process.exit(1);
  }
}

// Iniciar servidor
startServer();

module.exports = app;