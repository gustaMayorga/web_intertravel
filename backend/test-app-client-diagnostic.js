const path = require('path');

console.log('üîß DIAGN√ìSTICO ESPEC√çFICO - RUTAS APP CLIENTE\n');

// Test 1: Verificar que el archivo existe y es v√°lido
console.log('1Ô∏è‚É£ Verificando archivo app-client.js...');
try {
    const appClientPath = path.join(__dirname, 'routes', 'app-client.js');
    const appClientModule = require('./routes/app-client');
    console.log('‚úÖ Archivo app-client.js cargado correctamente');
    console.log('   Tipo de export:', typeof appClientModule);
    console.log('   Es funci√≥n router:', typeof appClientModule === 'function');
} catch (error) {
    console.error('‚ùå Error cargando app-client.js:', error.message);
    console.error('   Stack:', error.stack);
    process.exit(1);
}

// Test 2: Verificar dependencias cr√≠ticas
console.log('\n2Ô∏è‚É£ Verificando dependencias...');
try {
    const express = require('express');
    console.log('‚úÖ Express disponible');
    
    const bcrypt = require('bcrypt');
    console.log('‚úÖ Bcrypt disponible');
    
    const jwt = require('jsonwebtoken');
    console.log('‚úÖ JWT disponible');
} catch (error) {
    console.error('‚ùå Error en dependencias:', error.message);
}

// Test 3: Verificar m√≥dulo de base de datos
console.log('\n3Ô∏è‚É£ Verificando m√≥dulo de base de datos...');
try {
    const { query } = require('./database');
    console.log('‚úÖ M√≥dulo database disponible');
    console.log('   Funci√≥n query:', typeof query);
} catch (error) {
    console.error('‚ùå Error en m√≥dulo database:', error.message);
    console.error('   Esto puede estar causando el problema!');
}

// Test 4: Simular registro de rutas
console.log('\n4Ô∏è‚É£ Simulando registro de rutas...');
try {
    const express = require('express');
    const app = express();
    
    console.log('   Creando app Express...');
    app.use(express.json());
    
    console.log('   Intentando registrar rutas app-client...');
    const appClientRoutes = require('./routes/app-client');
    app.use('/api/app', appClientRoutes);
    console.log('‚úÖ Rutas registradas exitosamente en simulaci√≥n');
    
    // Test b√°sico de endpoint
    console.log('   Verificando que las rutas est√°n disponibles...');
    const request = require('supertest');
    
    request(app)
        .get('/api/app/health')
        .expect(200)
        .end((err, res) => {
            if (err) {
                console.error('‚ùå Error en test de health endpoint:', err.message);
            } else {
                console.log('‚úÖ Health endpoint funciona correctamente');
                console.log('   Respuesta:', res.body.message);
            }
        });
        
} catch (error) {
    console.error('‚ùå Error en simulaci√≥n de rutas:', error.message);
    console.error('   Stack completo:', error.stack);
}

console.log('\nüìã RESUMEN DEL DIAGN√ìSTICO:');
console.log('Si ves errores arriba, especialmente en el m√≥dulo database,');
console.log('ese es probablemente el problema que impide que las rutas se registren.');
console.log('\nSoluciones posibles:');
console.log('1. Verificar que PostgreSQL est√© corriendo');
console.log('2. Verificar variables de entorno de DB');
console.log('3. Verificar que database.js exporta correctamente');
