// ===============================================
// TRAVEL COMPOSITOR - MODO SIN AUTENTICACIÓN
// ===============================================

const axios = require('axios');

const tcConfig = {
  baseUrl: 'https://online.travelcompositor.com',
  timeout: 15000,
  
  // Primero intentar SIN autenticación
  async getPackagesWithoutAuth(limit = 12) {
    console.log('🔓 Intentando obtener paquetes SIN autenticación...');
    
    const possibleEndpoints = [
      '/api/packages',
      '/api/package',
      '/api/travelidea', 
      '/packages',
      '/package',
      '/travelidea',
      '/resources/package',
      '/resources/travelidea',
      '/webservice/package',
      '/api/holidays',
      // Con microsite
      '/api/package/intertravelgroup',
      '/api/travelidea/intertravelgroup',
      '/resources/package/intertravelgroup',
      '/resources/travelidea/intertravelgroup'
    ];
    
    for (const endpoint of possibleEndpoints) {
      try {
        console.log(`🔍 Probando: ${this.baseUrl}${endpoint}`);\n        \n        const response = await axios.get(`${this.baseUrl}${endpoint}`, {\n          timeout: this.timeout,\n          headers: {\n            'Accept': 'application/json',\n            'User-Agent': 'InterTravel/1.0'\n          },\n          params: {\n            limit: limit,\n            lang: 'es',\n            format: 'json'\n          },\n          validateStatus: (status) => status < 500 // Aceptar hasta 499\n        });\n        \n        console.log(`📡 ${endpoint}: Status ${response.status}`);\n        \n        // Si es 200, tenemos datos!\n        if (response.status === 200 && response.data) {\n          console.log(`✅ ¡DATOS OBTENIDOS sin autenticación desde ${endpoint}!`);\n          \n          const packages = this.normalizeResponse(response.data);\n          \n          if (packages.length > 0) {\n            return {\n              success: true,\n              packages: packages,\n              source: 'travel-compositor-no-auth',\n              endpoint: endpoint\n            };\n          }\n        }\n        \n        // Si es 401, necesita auth pero el endpoint existe\n        if (response.status === 401) {\n          console.log(`🔐 ${endpoint} requiere autenticación (endpoint válido)`);\n          // Guardar para intentar con auth después\n        }\n        \n      } catch (error) {\n        if (error.response?.status === 401) {\n          console.log(`🔐 ${endpoint} requiere autenticación`);\n        } else {\n          console.log(`❌ ${endpoint}: ${error.message}`);\n        }\n      }\n    }\n    \n    return { success: false, error: 'No se encontraron endpoints públicos' };\n  },\n  \n  // Normalizar respuesta (intentar diferentes formatos)\n  normalizeResponse(data) {\n    console.log('🔍 Analizando respuesta:', typeof data);\n    console.log('📊 Estructura:', Object.keys(data || {}));\n    \n    let rawPackages = [];\n    \n    // Intentar diferentes estructuras de respuesta\n    if (Array.isArray(data)) {\n      rawPackages = data;\n    } else if (data.packages) {\n      rawPackages = data.packages;\n    } else if (data.package) {\n      rawPackages = Array.isArray(data.package) ? data.package : [data.package];\n    } else if (data.travelidea) {\n      rawPackages = Array.isArray(data.travelidea) ? data.travelidea : [data.travelidea];\n    } else if (data.ideas) {\n      rawPackages = data.ideas;\n    } else if (data.holidays) {\n      rawPackages = data.holidays;\n    } else if (data.products) {\n      rawPackages = data.products;\n    } else if (data.items) {\n      rawPackages = data.items;\n    } else if (data.results) {\n      rawPackages = data.results;\n    } else if (data.data) {\n      rawPackages = Array.isArray(data.data) ? data.data : [data.data];\n    }\n    \n    console.log(`📦 Encontrados ${rawPackages.length} elementos para normalizar`);\n    \n    if (rawPackages.length > 0) {\n      console.log('📋 Primer elemento:', JSON.stringify(rawPackages[0], null, 2).substring(0, 300));\n    }\n    \n    return rawPackages.map((pkg, index) => this.normalizePackage(pkg, index));\n  },\n  \n  // Normalizar paquete individual\n  normalizePackage(pkg, index = 0) {\n    // Extraer campos comunes de diferentes estructuras\n    const title = pkg.title || pkg.name || pkg.largeTitle || pkg.packageName || pkg.description || `Paquete ${index + 1}`;\n    const destination = this.extractDestination(pkg);\n    const country = this.extractCountry(pkg);\n    const price = this.extractPrice(pkg);\n    const description = pkg.description || pkg.shortDescription || pkg.summary || title;\n    \n    return {\n      id: pkg.id || pkg.packageId || pkg.code || `tc-${index}`,\n      title: title,\n      destination: destination,\n      country: country,\n      price: {\n        amount: price,\n        currency: 'USD'\n      },\n      duration: {\n        days: pkg.days || pkg.duration || 7,\n        nights: (pkg.days || pkg.duration || 7) - 1\n      },\n      category: pkg.category || pkg.theme || pkg.type || 'Viaje',\n      description: {\n        short: description.substring(0, 150),\n        full: description\n      },\n      images: {\n        main: pkg.imageUrl || pkg.image || pkg.photo || 'https://images.unsplash.com/photo-1488646953014-85cb44e25828?w=800&h=600&fit=crop'\n      },\n      featured: true,\n      status: 'active',\n      _source: 'travel-compositor',\n      _raw: pkg // Guardar datos originales para debug\n    };\n  },\n  \n  extractDestination(pkg) {\n    // Buscar destino en diferentes campos\n    return pkg.destination || \n           pkg.city || \n           pkg.location || \n           pkg.place ||\n           (pkg.destinations && pkg.destinations[0]?.name) ||\n           (pkg.locations && pkg.locations[0]?.name) ||\n           'Destino';\n  },\n  \n  extractCountry(pkg) {\n    return pkg.country || \n           pkg.region ||\n           (pkg.destinations && pkg.destinations[0]?.country) ||\n           (pkg.locations && pkg.locations[0]?.country) ||\n           'País';\n  },\n  \n  extractPrice(pkg) {\n    // Buscar precio en diferentes campos\n    if (pkg.price) {\n      return typeof pkg.price === 'number' ? pkg.price : pkg.price.amount || pkg.price.value || 999;\n    }\n    \n    return pkg.pricePerPerson?.amount ||\n           pkg.totalPrice?.amount ||\n           pkg.cost ||\n           pkg.amount ||\n           pkg.value ||\n           999;\n  },\n  \n  // Método principal público\n  async getPackages(limit = 12) {\n    console.log('🌍 Obteniendo paquetes de Travel Compositor...');\n    \n    // 1. Intentar sin autenticación primero\n    const noAuthResult = await this.getPackagesWithoutAuth(limit);\n    \n    if (noAuthResult.success) {\n      console.log(`✅ ¡Paquetes obtenidos exitosamente sin autenticación! (${noAuthResult.packages.length})`);\n      return noAuthResult;\n    }\n    \n    // 2. Si falla, usar la lógica de autenticación original\n    console.log('🔑 Sin autenticación falló, intentando método original...');\n    \n    // Aquí iría la lógica de autenticación original si la necesitamos\n    // Por ahora, devolver fallo para usar fallback\n    \n    return { \n      success: false, \n      error: 'No se pudieron obtener paquetes con ningún método',\n      attempted: ['no-auth', 'auth-failed']\n    };\n  },\n  \n  // Método de prueba simple\n  async testConnection() {\n    console.log('🧪 Testing Travel Compositor connection...');\n    \n    try {\n      const response = await axios.get(this.baseUrl, {\n        timeout: 5000,\n        validateStatus: () => true\n      });\n      \n      console.log(`📡 Base URL response: ${response.status}`);\n      \n      if (response.status === 200) {\n        // Probar obtener paquetes\n        const packagesResult = await this.getPackages(3);\n        \n        return {\n          baseUrl: true,\n          packages: packagesResult.success,\n          packagesCount: packagesResult.packages?.length || 0,\n          source: packagesResult.source || 'failed'\n        };\n      }\n      \n      return { baseUrl: false, packages: false };\n      \n    } catch (error) {\n      console.log(`❌ Test failed: ${error.message}`);\n      return { baseUrl: false, packages: false, error: error.message };\n    }\n  }\n};\n\nmodule.exports = tcConfig;