#!/usr/bin/env node

// Test para verificar que la obtenci√≥n de paquetes funciona correctamente
const tcConfig = require('./travel-compositor-safe.js');

async function testPackageRetrieval() {
  console.log('üß™ Iniciando test de obtenci√≥n de paquetes...\n');
  
  try {
    // 1. Test de autenticaci√≥n
    console.log('1. Probando autenticaci√≥n...');
    const authResult = await tcConfig.tryAuthentication();
    
    if (!authResult.success) {
      console.log('‚ùå Autenticaci√≥n fall√≥, usando datos mock');
      return;
    }
    
    // 2. Test de obtenci√≥n de todos los paquetes
    console.log('\n2. Obteniendo TODOS los paquetes...');
    const allPackages = await tcConfig.getAllPackages();
    
    if (allPackages.success) {
      console.log(`‚úÖ Total obtenido: ${allPackages.packages.length} paquetes`);
      
      // 3. Test de estad√≠sticas
      console.log('\n3. Generando estad√≠sticas...');
      const stats = tcConfig.getPackageStats(allPackages.packages);
      console.log(`üìä Pa√≠ses disponibles: ${Object.keys(stats.byCountry).length}`);
      console.log(`üìä Categor√≠as disponibles: ${Object.keys(stats.byCategory).length}`);
      console.log(`üí∞ Rango de precios: $${stats.priceRange.min} - $${stats.priceRange.max}`);
      
      // Mostrar top 5 pa√≠ses
      const topCountries = Object.entries(stats.byCountry)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 5);
      console.log('\nüåç Top 5 pa√≠ses:');
      topCountries.forEach(([country, count]) => {
        console.log(`   ${country}: ${count} paquetes`);
      });
      
      // 4. Test de b√∫squeda
      console.log('\n4. Probando b√∫squeda...');
      const searchResult = await tcConfig.searchPackages({
        search: 'Espa√±a',
        limit: 10
      });
      
      if (searchResult.success) {
        console.log(`üîç B√∫squeda "Espa√±a": ${searchResult.packages.length} resultados de ${searchResult.totalAvailable} disponibles`);
        
        // Mostrar algunos resultados
        searchResult.packages.slice(0, 3).forEach(pkg => {
          console.log(`   - ${pkg.title} (${pkg.destination})`);
        });
      }
      
      // 5. Test de cache
      console.log('\n5. Probando cache...');
      const cachedResult = await tcConfig.getAllPackages();
      if (cachedResult.source === 'travel-compositor-cache') {
        console.log('‚úÖ Cache funcionando correctamente');
      } else {
        console.log('‚ö†Ô∏è Cache no activado (primera ejecuci√≥n)');
      }
      
      console.log('\nüéâ ¬°Todos los tests pasaron exitosamente!');
      console.log(`\nüìä RESUMEN FINAL:`);
      console.log(`   Total de paquetes: ${allPackages.packages.length}`);
      console.log(`   Pa√≠ses √∫nicos: ${Object.keys(stats.byCountry).length}`);
      console.log(`   Categor√≠as √∫nicas: ${Object.keys(stats.byCategory).length}`);
      console.log(`   Fuente: ${allPackages.source}`);
      
    } else {
      console.log('‚ùå Error obteniendo paquetes:', allPackages.error);
    }
    
  } catch (error) {
    console.error('‚ùå Error en test:', error.message);
  }
}

if (require.main === module) {
  testPackageRetrieval();
}

module.exports = testPackageRetrieval;