// API Client for InterTravel Backend Integration
import { backendConfig } from '@/lib/config';

export interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  message?: string;
  error?: string;
}

export interface User {
  id: number;
  firstName: string;
  lastName: string;
  fullName: string;
  email: string;
  phone?: string;
  role: string;
  joinDate?: string;
  // ‚úÖ Propiedades adicionales para compatibilidad
  photoURL?: string;
  displayName?: string;
}

export interface Booking {
  id: string;
  bookingReference: string;
  packageId?: number;
  packageTitle: string;
  packageSource: string;
  destination: string;
  country: string;
  travelDate: string;
  returnDate: string;
  durationDays: number;
  travelersCount: number;
  totalAmount: number;
  paidAmount: number;
  currency: string;
  status: 'pending' | 'confirmed' | 'cancelled' | 'completed';
  paymentStatus: 'pending' | 'paid' | 'partial' | 'refunded' | 'failed';
  specialRequests?: string;
  services?: string[];
  images?: string[];
  createdAt: string;
  updatedAt?: string;
}

export interface UserStats {
  totalBookings: number;
  confirmedBookings: number;
  pendingBookings: number;
  completedBookings: number;
  totalSpent: number;
  confirmedSpent: number;
  avgBookingValue: number;
}

class APIClient {
  private baseURL: string;
  private token: string | null = null;

  constructor() {
    this.baseURL = backendConfig.baseURL;
    
    // Cargar token del localStorage al inicializar
    if (typeof window !== 'undefined') {
      this.token = localStorage.getItem('auth_token');
    }
  }

  // Configurar token de autenticaci√≥n
  setToken(token: string | null) {
    this.token = token;
    if (typeof window !== 'undefined') {
      if (token) {
        localStorage.setItem('auth_token', token);
      } else {
        localStorage.removeItem('auth_token');
      }
    }
  }

  // Obtener headers por defecto
  private getHeaders(): HeadersInit {
    const headers: HeadersInit = {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
    };

    if (this.token) {
      headers['Authorization'] = `Bearer ${this.token}`;
    }

    return headers;
  }

  // M√©todo gen√©rico para hacer requests
  private async request<T>(
    endpoint: string, 
    options: RequestInit = {}
  ): Promise<ApiResponse<T>> {
    try {
      const url = `${this.baseURL}/api/app${endpoint}`;
      
      console.log(`üåê API Request: ${options.method || 'GET'} ${url}`);
      
      const response = await fetch(url, {
        ...options,
        headers: {
          ...this.getHeaders(),
          ...options.headers,
        },
        // @ts-ignore - timeout is not in standard RequestInit but supported by many environments
        timeout: backendConfig.timeout,
      });

      const data = await response.json();

      if (!response.ok) {
        console.error(`‚ùå API Error: ${response.status}`, data);
        return {
          success: false,
          error: data.error || `HTTP ${response.status}`,
        };
      }

      console.log(`‚úÖ API Success: ${endpoint}`);
      return {
        success: true,
        data: data,
      };

    } catch (error) {
      console.error('‚ùå Network Error:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Error de conexi√≥n',
      };
    }
  }

  // ======================================
  // AUTENTICACI√ìN
  // ======================================

  async login(email: string, password: string): Promise<ApiResponse<{ user: User; token: string }>> {
    const response = await this.request<{ user: User; token: string }>('/auth/login', {
      method: 'POST',
      body: JSON.stringify({ email, password }),
    });

    console.log('üîç API Client - Full response:', JSON.stringify(response, null, 2));
    
    if (response.success && response.data && response.data.data) {
      console.log('üîç API Client - Extracting token from response.data.data');
      console.log('üîç API Client - Token found:', response.data.data.token);
      this.setToken(response.data.data.token);
    } else {
      console.log('‚ùå API Client - No token found in response structure');
    }

    return response;
  }

  async register(
    firstName: string,
    lastName: string,
    email: string,
    phone: string,
    password: string
  ): Promise<ApiResponse<{ user: User; token: string }>> {
    const response = await this.request<{ user: User; token: string }>('/auth/register', {
      method: 'POST',
      body: JSON.stringify({ firstName, lastName, email, phone, password }),
    });

    if (response.success && response.data && response.data.data) {
      this.setToken(response.data.data.token);
    }

    return response;
  }

  logout() {
    this.setToken(null);
    if (typeof window !== 'undefined') {
      localStorage.removeItem('user_data');
    }
  }

  // ======================================
  // USUARIO
  // ======================================

  async getUserProfile(): Promise<ApiResponse<{ user: User }>> {
    return this.request<{ user: User }>('/user/profile');
  }

  async updateUserProfile(
    firstName: string,
    lastName: string,
    phone?: string
  ): Promise<ApiResponse<{ user: User }>> {
    return this.request<{ user: User }>('/user/profile', {
      method: 'PUT',
      body: JSON.stringify({ firstName, lastName, phone }),
    });
  }

  async getUserStats(): Promise<ApiResponse<{ stats: UserStats }>> {
    return this.request<{ stats: UserStats }>('/user/stats');
  }

  // ======================================
  // RESERVAS
  // ======================================

  async getUserBookings(): Promise<ApiResponse<{ bookings: Booking[]; total: number }>> {
    return this.request<{ bookings: Booking[]; total: number }>('/user/bookings');
  }

  async getBookingDetails(bookingId: string): Promise<ApiResponse<{ booking: Booking }>> {
    return this.request<{ booking: Booking }>(`/user/bookings/${bookingId}`);
  }

  // ======================================
  // HEALTH CHECK
  // ======================================

  async healthCheck(): Promise<ApiResponse<any>> {
    return this.request<any>('/health');
  }

  // ======================================
  // UTILIDADES
  // ======================================

  isAuthenticated(): boolean {
    return !!this.token;
  }

  getToken(): string | null {
    return this.token;
  }
}

// Crear instancia singleton
const clientInstance = new APIClient();

// Export expl√≠cito de la instancia
export const apiClient = clientInstance;

// Export por defecto tambi√©n
export default clientInstance;

// Hook de conveniencia
export const useAPIClient = () => clientInstance;

// Export de la clase por si se necesita crear instancias adicionales
export { APIClient };
