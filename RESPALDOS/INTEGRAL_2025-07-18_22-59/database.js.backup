// PostgreSQL Configuration for InterTravel
require('dotenv').config();
const { Pool } = require('pg');

// Database configuration
const DB_CONFIG = {
  // PostgreSQL Production (Hostinger/Railway/Supabase)
  production: {
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT || 5432,
    database: process.env.DB_NAME || 'intertravel_prod',
    user: process.env.DB_USER || 'intertravel_user',
    password: process.env.DB_PASSWORD || 'CHANGE_THIS_PASSWORD',
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
    max: 20,
    idleTimeoutMillis: 30000,
    connectionTimeoutMillis: 2000,
  },
  
  // PostgreSQL Development (local)
  development: {
    host: 'localhost',
    port: 5432,
    database: 'intertravel_dev',
    user: 'postgres',
    password: 'postgres',
    ssl: false,
    max: 10,
    idleTimeoutMillis: 30000,
    connectionTimeoutMillis: 2000,
  }
};

class PostgreSQLManager {
  constructor() {
    this.pool = null;
    this.isConnected = false;
    this.environment = process.env.NODE_ENV || 'development';
  }

  async connect() {
    try {
      const config = this.environment === 'production' ? DB_CONFIG.production : DB_CONFIG.development;
      
      console.log(`üêò Conectando a PostgreSQL (${this.environment})...`);
      
      this.pool = new Pool(config);
      
      // Test connection
      const client = await this.pool.connect();
      const result = await client.query('SELECT NOW() as current_time, version() as version');
      client.release();
      
      this.isConnected = true;
      console.log('‚úÖ PostgreSQL conectado exitosamente');
      console.log(`üìä Versi√≥n: ${result.rows[0].version.split(' ')[0]} ${result.rows[0].version.split(' ')[1]}`);
      console.log(`‚è∞ Hora servidor: ${result.rows[0].current_time}`);
      
      // Setup error handlers
      this.setupEventHandlers();
      
      return { success: true, environment: this.environment };
      
    } catch (error) {
      console.error('‚ùå Error conectando PostgreSQL:', error.message);
      this.isConnected = false;
      return { success: false, error: error.message };
    }
  }

  setupEventHandlers() {
    this.pool.on('error', (err) => {
      console.error('‚ùå PostgreSQL Pool Error:', err);
      this.isConnected = false;
    });

    this.pool.on('connect', () => {
      console.log('üîó Nueva conexi√≥n PostgreSQL establecida');
    });

    // Graceful shutdown
    process.on('SIGINT', async () => {
      await this.disconnect();
      process.exit(0);
    });

    process.on('SIGTERM', async () => {
      await this.disconnect();
      process.exit(0);
    });
  }

  async disconnect() {
    if (this.pool) {
      await this.pool.end();
      console.log('üõë PostgreSQL: Pool de conexiones cerrado');
      this.isConnected = false;
    }
  }

  async query(text, params = []) {
    if (!this.isConnected) {
      throw new Error('Database not connected');
    }
    
    const start = Date.now();
    try {
      const result = await this.pool.query(text, params);
      const duration = Date.now() - start;
      
      if (duration > 1000) {
        console.log(`‚ö†Ô∏è Consulta lenta (${duration}ms): ${text.substring(0, 100)}...`);
      }
      
      return result;
    } catch (error) {
      console.error('‚ùå Query Error:', error.message);
      console.error('üìù Query:', text);
      console.error('üìã Params:', params);
      throw error;
    }
  }

  async getClient() {
    return await this.pool.connect();
  }

  getStatus() {
    return {
      connected: this.isConnected,
      environment: this.environment,
      totalCount: this.pool?.totalCount || 0,
      idleCount: this.pool?.idleCount || 0,
      waitingCount: this.pool?.waitingCount || 0
    };
  }

  // Database initialization and migrations
  async initializeDatabase() {
    try {
      console.log('üîß Inicializando estructura de base de datos...');
      
      await this.createTables();
      await this.createIndexes();
      await this.insertDefaultData();
      
      console.log('‚úÖ Base de datos inicializada correctamente');
      return { success: true };
      
    } catch (error) {
      console.error('‚ùå Error inicializando base de datos:', error);
      return { success: false, error: error.message };
    }
  }

  async createTables() {
    const tables = [
      // Clients table (AGREGADA - faltaba)
      `CREATE TABLE IF NOT EXISTS clients (
        id SERIAL PRIMARY KEY,
        first_name VARCHAR(255) NOT NULL,
        last_name VARCHAR(255) NOT NULL,
        name VARCHAR(255) GENERATED ALWAYS AS (first_name || ' ' || last_name) STORED,
        email VARCHAR(255) UNIQUE NOT NULL,
        phone VARCHAR(20),
        date_of_birth DATE,
        nationality VARCHAR(100) DEFAULT 'Argentina',
        passport_number VARCHAR(50),
        passport_expiry DATE,
        address TEXT,
        city VARCHAR(100),
        province VARCHAR(100),
        country VARCHAR(100) DEFAULT 'Argentina',
        emergency_contact_name VARCHAR(255),
        emergency_contact_phone VARCHAR(20),
        preferences JSONB,
        status VARCHAR(20) DEFAULT 'active',
        notes TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        last_booking_date TIMESTAMP
      )`,

      // Agencies table (CR√çTICA - faltaba)
      `CREATE TABLE IF NOT EXISTS agencies (
        id SERIAL PRIMARY KEY,
        code VARCHAR(20) UNIQUE NOT NULL,
        name VARCHAR(255) NOT NULL,
        business_name VARCHAR(255),
        cuit VARCHAR(20),
        address TEXT,
        city VARCHAR(100),
        province VARCHAR(100),
        country VARCHAR(100) DEFAULT 'Argentina',
        phone VARCHAR(20),
        email VARCHAR(255) UNIQUE NOT NULL,
        contact_person VARCHAR(255),
        commission_rate DECIMAL(5,2) DEFAULT 10.00,
        credit_limit DECIMAL(10,2) DEFAULT 0.00,
        current_balance DECIMAL(10,2) DEFAULT 0.00,
        status VARCHAR(20) DEFAULT 'pending',
        contract_date DATE,
        notes TEXT,
        metadata JSONB,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        created_by INTEGER,
        updated_by INTEGER
      )`,

      // Users table (agregar agency_id)
      `CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        username VARCHAR(50) UNIQUE NOT NULL,
        email VARCHAR(255) UNIQUE NOT NULL,
        password_hash VARCHAR(255) NOT NULL,
        role VARCHAR(20) DEFAULT 'user',
        full_name VARCHAR(255),
        phone VARCHAR(20),
        agency_id INTEGER,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        last_login TIMESTAMP,
        is_active BOOLEAN DEFAULT true
      )`,

      // Leads table
      `CREATE TABLE IF NOT EXISTS leads (
        id SERIAL PRIMARY KEY,
        email VARCHAR(255) UNIQUE NOT NULL,
        source VARCHAR(100) NOT NULL,
        location VARCHAR(255),
        status VARCHAR(20) DEFAULT 'new',
        conversion_value DECIMAL(10,2),
        metadata JSONB,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        contacted_at TIMESTAMP,
        converted_at TIMESTAMP
      )`,

      // Packages table
      `CREATE TABLE IF NOT EXISTS packages (
        id SERIAL PRIMARY KEY,
        package_id VARCHAR(100) UNIQUE NOT NULL,
        title VARCHAR(500) NOT NULL,
        destination VARCHAR(255) NOT NULL,
        country VARCHAR(100) NOT NULL,
        price_amount DECIMAL(10,2) NOT NULL,
        price_currency VARCHAR(3) DEFAULT 'USD',
        original_price DECIMAL(10,2),
        duration_days INTEGER NOT NULL,
        duration_nights INTEGER NOT NULL,
        category VARCHAR(100),
        description_short TEXT,
        description_full TEXT,
        images JSONB,
        features JSONB,
        rating_average DECIMAL(3,2),
        rating_count INTEGER DEFAULT 0,
        is_featured BOOLEAN DEFAULT false,
        status VARCHAR(20) DEFAULT 'active',
        source VARCHAR(50) DEFAULT 'manual',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )`,

      // Bookings table
      `CREATE TABLE IF NOT EXISTS bookings (
        id SERIAL PRIMARY KEY,
        booking_reference VARCHAR(50) UNIQUE NOT NULL,
        package_id VARCHAR(100) NOT NULL,
        package_name VARCHAR(500), -- AGREGADO
        client_id INTEGER, -- AGREGADO
        customer_name VARCHAR(255) NOT NULL,
        customer_email VARCHAR(255) NOT NULL,
        customer_phone VARCHAR(20),
        passenger_count INTEGER DEFAULT 1, -- RENOMBRADO de travelers_count
        total_amount DECIMAL(10,2) NOT NULL,
        currency VARCHAR(3) DEFAULT 'USD',
        status VARCHAR(20) DEFAULT 'pending',
        travel_date DATE,
        special_requests TEXT,
        payment_status VARCHAR(20) DEFAULT 'pending',
        payment_method VARCHAR(50),
        source VARCHAR(50) DEFAULT 'web',
        metadata JSONB,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        confirmed_at TIMESTAMP,
        cancelled_at TIMESTAMP
      )`,

      // Admin activity log
      `CREATE TABLE IF NOT EXISTS admin_activity (
        id SERIAL PRIMARY KEY,
        user_id INTEGER,
        action VARCHAR(100) NOT NULL,
        resource_type VARCHAR(50),
        resource_id VARCHAR(100),
        details JSONB,
        ip_address INET,
        user_agent TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )`,

      // System config
      `CREATE TABLE IF NOT EXISTS system_config (
        id SERIAL PRIMARY KEY,
        key VARCHAR(100) UNIQUE NOT NULL,
        value JSONB NOT NULL,
        description TEXT,
        is_public BOOLEAN DEFAULT false,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )`,

      // === M√ìDULO DE PAGOS (AGENTE 3) ===
      // Tabla de √≥rdenes de pago
      `CREATE TABLE IF NOT EXISTS orders (
        id VARCHAR(50) PRIMARY KEY,
        package_id VARCHAR(100) NOT NULL,
        package_title VARCHAR(500) NOT NULL,
        package_destination VARCHAR(255),
        package_duration VARCHAR(100),
        amount DECIMAL(10,2) NOT NULL,
        currency VARCHAR(3) DEFAULT 'USD',
        customer_name VARCHAR(255) NOT NULL,
        customer_email VARCHAR(255) NOT NULL,
        customer_phone VARCHAR(20),
        travelers INTEGER DEFAULT 1,
        payment_method VARCHAR(20) NOT NULL, -- 'mercadopago' | 'stripe'
        payment_id VARCHAR(255),
        payment_data JSONB,
        special_requests TEXT,
        status VARCHAR(20) DEFAULT 'pending', -- 'pending' | 'confirmed' | 'failed' | 'cancelled'
        transaction_id VARCHAR(255),
        payment_response JSONB,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        confirmed_at TIMESTAMP,
        failed_at TIMESTAMP,
        failure_reason TEXT
      )`,

      // Tabla de transacciones de pago (renombrada para evitar conflicto)
      `CREATE TABLE IF NOT EXISTS payment_transactions (
        id SERIAL PRIMARY KEY,
        order_id VARCHAR(50) REFERENCES orders(id),
        gateway VARCHAR(20) NOT NULL, -- 'mercadopago' | 'stripe'
        gateway_transaction_id VARCHAR(255),
        amount DECIMAL(10,2) NOT NULL,
        currency VARCHAR(3) DEFAULT 'USD',
        status VARCHAR(20) DEFAULT 'pending', -- 'pending' | 'approved' | 'rejected' | 'cancelled'
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )`,

      // Tabla de vouchers generados
      `CREATE TABLE IF NOT EXISTS vouchers (
        id SERIAL PRIMARY KEY,
        order_id VARCHAR(50) REFERENCES orders(id),
        filename VARCHAR(255) NOT NULL,
        filepath TEXT NOT NULL,
        generated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )`,

      // === M√ìDULO CONTABLE ===
      // Plan de cuentas contables
      `CREATE TABLE IF NOT EXISTS financial_accounts (
        id SERIAL PRIMARY KEY,
        account_code VARCHAR(20) UNIQUE NOT NULL,
        account_name VARCHAR(255) NOT NULL,
        account_type VARCHAR(50) NOT NULL, -- assets, liabilities, equity, revenue, expenses
        parent_account_id INTEGER,
        level INTEGER DEFAULT 1,
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )`,

      // Transacciones contables (diferente de payment_transactions)
      `CREATE TABLE IF NOT EXISTS accounting_transactions (
        id SERIAL PRIMARY KEY,
        transaction_number VARCHAR(50) UNIQUE NOT NULL,
        transaction_date DATE NOT NULL,
        reference VARCHAR(100),
        description TEXT NOT NULL,
        total_amount DECIMAL(12,2) NOT NULL,
        status VARCHAR(20) DEFAULT 'pending', -- pending, posted, cancelled
        created_by INTEGER,
        approved_by INTEGER,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        posted_at TIMESTAMP
      )`,

      // Detalle de asientos contables
      `CREATE TABLE IF NOT EXISTS accounting_entries (
        id SERIAL PRIMARY KEY,
        transaction_id INTEGER NOT NULL,
        account_id INTEGER NOT NULL,
        debit_amount DECIMAL(12,2) DEFAULT 0,
        credit_amount DECIMAL(12,2) DEFAULT 0,
        description TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )`,

      // Facturaci√≥n
      `CREATE TABLE IF NOT EXISTS invoices (
        id SERIAL PRIMARY KEY,
        invoice_number VARCHAR(50) UNIQUE NOT NULL,
        agency_id INTEGER,
        issue_date DATE NOT NULL,
        due_date DATE NOT NULL,
        subtotal DECIMAL(10,2) NOT NULL,
        tax_amount DECIMAL(10,2) DEFAULT 0,
        total_amount DECIMAL(10,2) NOT NULL,
        status VARCHAR(20) DEFAULT 'draft', -- draft, sent, paid, overdue, cancelled
        payment_terms INTEGER DEFAULT 30, -- d√≠as
        notes TEXT,
        metadata JSONB,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        paid_at TIMESTAMP
      )`,

      // L√≠neas de factura
      `CREATE TABLE IF NOT EXISTS invoice_lines (
        id SERIAL PRIMARY KEY,
        invoice_id INTEGER NOT NULL,
        description TEXT NOT NULL,
        quantity DECIMAL(10,2) DEFAULT 1,
        unit_price DECIMAL(10,2) NOT NULL,
        line_total DECIMAL(10,2) NOT NULL,
        tax_rate DECIMAL(5,2) DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )`,

      // Pagos recibidos
      `CREATE TABLE IF NOT EXISTS payment_records (
        id SERIAL PRIMARY KEY,
        payment_number VARCHAR(50) UNIQUE NOT NULL,
        invoice_id INTEGER,
        agency_id INTEGER,
        amount DECIMAL(10,2) NOT NULL,
        payment_method VARCHAR(50) NOT NULL, -- transfer, card, cash, check
        payment_date DATE NOT NULL,
        reference VARCHAR(100),
        notes TEXT,
        status VARCHAR(20) DEFAULT 'confirmed', -- pending, confirmed, rejected
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )`,

      // === AMPLIACI√ìN AGENCIAS ===
      // Solicitudes de alta de agencias
      `CREATE TABLE IF NOT EXISTS agency_applications (
        id SERIAL PRIMARY KEY,
        company_name VARCHAR(255) NOT NULL,
        business_name VARCHAR(255),
        cuit VARCHAR(20),
        contact_person VARCHAR(255) NOT NULL,
        email VARCHAR(255) NOT NULL,
        phone VARCHAR(20),
        address TEXT,
        city VARCHAR(100),
        province VARCHAR(100),
        documentation JSONB, -- URLs de documentos subidos
        status VARCHAR(20) DEFAULT 'pending', -- pending, reviewing, approved, rejected
        application_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        reviewed_by INTEGER,
        reviewed_at TIMESTAMP,
        rejection_reason TEXT,
        commission_rate_proposed DECIMAL(5,2),
        credit_limit_requested DECIMAL(10,2),
        notes TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )`,

      // Sistema de rankings de agencias
      `CREATE TABLE IF NOT EXISTS agency_rankings (
        id SERIAL PRIMARY KEY,
        ranking_name VARCHAR(50) NOT NULL, -- bronze, silver, gold, platinum, diamond
        min_monthly_sales DECIMAL(10,2) NOT NULL,
        base_commission_rate DECIMAL(5,2) NOT NULL,
        bonus_rate DECIMAL(5,2) DEFAULT 0,
        credit_limit_multiplier DECIMAL(3,2) DEFAULT 1.0,
        benefits JSONB,
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )`,

      // Reglas de comisiones personalizadas
      `CREATE TABLE IF NOT EXISTS commission_rules (
        id SERIAL PRIMARY KEY,
        agency_id INTEGER NOT NULL,
        product_category VARCHAR(100),
        destination VARCHAR(100),
        commission_type VARCHAR(20) NOT NULL, -- percentage, fixed, tiered
        commission_value DECIMAL(8,2) NOT NULL,
        min_amount DECIMAL(10,2),
        max_amount DECIMAL(10,2),
        effective_from DATE NOT NULL,
        effective_until DATE,
        is_active BOOLEAN DEFAULT true,
        created_by INTEGER,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )`,

      // Performance de agencias (calculado mensualmente)
      `CREATE TABLE IF NOT EXISTS agency_performance (
        id SERIAL PRIMARY KEY,
        agency_id INTEGER NOT NULL,
        period_start DATE NOT NULL,
        period_end DATE NOT NULL,
        total_sales DECIMAL(12,2) DEFAULT 0,
        total_bookings INTEGER DEFAULT 0,
        commission_earned DECIMAL(10,2) DEFAULT 0,
        ranking_id INTEGER,
        performance_score DECIMAL(5,2) DEFAULT 0,
        calculated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )`,

      // === TABLA DE REVIEWS/OPINIONES ===
      `CREATE TABLE IF NOT EXISTS reviews (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        location VARCHAR(255) NOT NULL,
        rating INTEGER NOT NULL CHECK (rating >= 1 AND rating <= 5),
        text TEXT NOT NULL,
        trip VARCHAR(255) NOT NULL,
        avatar TEXT,
        date DATE NOT NULL,
        verified BOOLEAN DEFAULT true,
        featured BOOLEAN DEFAULT false,
        google_review_id VARCHAR(255),
        status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'pending')),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )`
    ];

    for (const table of tables) {
      await this.query(table);
    }

    console.log('‚úÖ Tablas creadas/verificadas');
    
    // Agregar foreign keys despu√©s de crear todas las tablas
    await this.addForeignKeys();
  }

  async addForeignKeys() {
    try {
      // Verificar y agregar foreign key para admin_activity
      const adminActivityConstraint = await this.query(`
        SELECT constraint_name 
        FROM information_schema.table_constraints 
        WHERE table_name = 'admin_activity' 
        AND constraint_name = 'admin_activity_user_id_fkey'
      `);
      
      if (adminActivityConstraint.rows.length === 0) {
        await this.query(`
          ALTER TABLE admin_activity 
          ADD CONSTRAINT admin_activity_user_id_fkey 
          FOREIGN KEY (user_id) REFERENCES users(id)
        `);
      }
      
      // Verificar y agregar foreign key para users -> agencies
      const usersConstraint = await this.query(`
        SELECT constraint_name 
        FROM information_schema.table_constraints 
        WHERE table_name = 'users' 
        AND constraint_name = 'users_agency_id_fkey'
      `);
      
      if (usersConstraint.rows.length === 0) {
        await this.query(`
          ALTER TABLE users 
          ADD CONSTRAINT users_agency_id_fkey 
          FOREIGN KEY (agency_id) REFERENCES agencies(id)
        `);
      }
      
      console.log('‚úÖ Foreign keys agregadas');
    } catch (error) {
      console.log('‚ö†Ô∏è Warning: Foreign keys no pudieron ser agregadas:', error.message);
    }
  }

  async createIndexes() {
    const indexes = [
      // Leads indexes
      'CREATE INDEX IF NOT EXISTS idx_leads_email ON leads(email)',
      'CREATE INDEX IF NOT EXISTS idx_leads_source ON leads(source)',
      'CREATE INDEX IF NOT EXISTS idx_leads_status ON leads(status)',
      'CREATE INDEX IF NOT EXISTS idx_leads_created_at ON leads(created_at DESC)',
      
      // Clients indexes (AGREGADOS - faltaban)
      'CREATE INDEX IF NOT EXISTS idx_clients_email ON clients(email)',
      'CREATE INDEX IF NOT EXISTS idx_clients_status ON clients(status)',
      'CREATE INDEX IF NOT EXISTS idx_clients_created_at ON clients(created_at DESC)',
      'CREATE INDEX IF NOT EXISTS idx_clients_full_name ON clients(first_name, last_name)',
      'CREATE INDEX IF NOT EXISTS idx_clients_nationality ON clients(nationality)',
      'CREATE INDEX IF NOT EXISTS idx_clients_city ON clients(city)',
      'CREATE INDEX IF NOT EXISTS idx_clients_country ON clients(country)',
      
      // Packages indexes
      'CREATE INDEX IF NOT EXISTS idx_packages_destination ON packages(destination)',
      'CREATE INDEX IF NOT EXISTS idx_packages_country ON packages(country)',
      'CREATE INDEX IF NOT EXISTS idx_packages_category ON packages(category)',
      'CREATE INDEX IF NOT EXISTS idx_packages_status ON packages(status)',
      'CREATE INDEX IF NOT EXISTS idx_packages_price ON packages(price_amount)',
      'CREATE INDEX IF NOT EXISTS idx_packages_created_at ON packages(created_at DESC)',
      
      // Bookings indexes
      'CREATE INDEX IF NOT EXISTS idx_bookings_reference ON bookings(booking_reference)',
      'CREATE INDEX IF NOT EXISTS idx_bookings_customer_email ON bookings(customer_email)',
      'CREATE INDEX IF NOT EXISTS idx_bookings_status ON bookings(status)',
      'CREATE INDEX IF NOT EXISTS idx_bookings_created_at ON bookings(created_at DESC)',
      'CREATE INDEX IF NOT EXISTS idx_bookings_travel_date ON bookings(travel_date)',
      
      // Users indexes
      'CREATE INDEX IF NOT EXISTS idx_users_email ON users(email)',
      'CREATE INDEX IF NOT EXISTS idx_users_role ON users(role)',
      'CREATE INDEX IF NOT EXISTS idx_users_active ON users(is_active)',
      'CREATE INDEX IF NOT EXISTS idx_users_agency_id ON users(agency_id)',
      
      // Agencies indexes
      'CREATE INDEX IF NOT EXISTS idx_agencies_code ON agencies(code)',
      'CREATE INDEX IF NOT EXISTS idx_agencies_email ON agencies(email)',
      'CREATE INDEX IF NOT EXISTS idx_agencies_status ON agencies(status)',
      'CREATE INDEX IF NOT EXISTS idx_agencies_city ON agencies(city)',
      'CREATE INDEX IF NOT EXISTS idx_agencies_province ON agencies(province)',
      
      // Activity log indexes
      'CREATE INDEX IF NOT EXISTS idx_activity_user_id ON admin_activity(user_id)',
      'CREATE INDEX IF NOT EXISTS idx_activity_action ON admin_activity(action)',
      'CREATE INDEX IF NOT EXISTS idx_activity_created_at ON admin_activity(created_at DESC)',
      
      // === √çNDICES M√ìDULO DE PAGOS ===
      // Orders indexes
      'CREATE INDEX IF NOT EXISTS idx_orders_customer_email ON orders(customer_email)',
      'CREATE INDEX IF NOT EXISTS idx_orders_status ON orders(status)',
      'CREATE INDEX IF NOT EXISTS idx_orders_payment_method ON orders(payment_method)',
      'CREATE INDEX IF NOT EXISTS idx_orders_created_at ON orders(created_at DESC)',
      'CREATE INDEX IF NOT EXISTS idx_orders_package_id ON orders(package_id)',
      
      // Payment Transactions indexes (nueva tabla)
      'CREATE INDEX IF NOT EXISTS idx_payment_transactions_order_id ON payment_transactions(order_id)',
      'CREATE INDEX IF NOT EXISTS idx_payment_transactions_gateway_id ON payment_transactions(gateway_transaction_id)',
      'CREATE INDEX IF NOT EXISTS idx_payment_transactions_status ON payment_transactions(status)',
      
      // Accounting Transactions indexes (nueva tabla)
      'CREATE INDEX IF NOT EXISTS idx_accounting_transactions_number ON accounting_transactions(transaction_number)',
      'CREATE INDEX IF NOT EXISTS idx_accounting_transactions_date ON accounting_transactions(transaction_date)',
      'CREATE INDEX IF NOT EXISTS idx_accounting_transactions_status ON accounting_transactions(status)',
      
      // Accounting Entries indexes (nueva tabla)
      'CREATE INDEX IF NOT EXISTS idx_accounting_entries_transaction ON accounting_entries(transaction_id)',
      'CREATE INDEX IF NOT EXISTS idx_accounting_entries_account ON accounting_entries(account_id)',
      
      // Vouchers indexes
      'CREATE INDEX IF NOT EXISTS idx_vouchers_order_id ON vouchers(order_id)',
      'CREATE INDEX IF NOT EXISTS idx_vouchers_generated_at ON vouchers(generated_at DESC)',
      
      // === √çNDICES PARA REVIEWS ===
      'CREATE INDEX IF NOT EXISTS idx_reviews_status ON reviews(status)',
      'CREATE INDEX IF NOT EXISTS idx_reviews_featured ON reviews(featured)',
      'CREATE INDEX IF NOT EXISTS idx_reviews_verified ON reviews(verified)',
      'CREATE INDEX IF NOT EXISTS idx_reviews_rating ON reviews(rating)',
      'CREATE INDEX IF NOT EXISTS idx_reviews_created_at ON reviews(created_at DESC)',
      'CREATE INDEX IF NOT EXISTS idx_reviews_date ON reviews(date DESC)',
      'CREATE INDEX IF NOT EXISTS idx_reviews_google_id ON reviews(google_review_id)',
      'CREATE INDEX IF NOT EXISTS idx_reviews_location ON reviews(location)',
      'CREATE INDEX IF NOT EXISTS idx_reviews_name ON reviews(name)'
    ];

    for (const index of indexes) {
      try {
        await this.query(index);
      } catch (error) {
        console.log(`‚ö†Ô∏è Warning: √çndice no pudo ser creado: ${error.message}`);
      }
    }

    console.log('‚úÖ √çndices creados/verificados');
  }

  async insertDefaultData() {
    try {
      // Check if admin user exists
      const adminExists = await this.query(
        'SELECT id FROM users WHERE username = $1',
        ['admin']
      );

      if (adminExists.rows.length === 0) {
        // Create default admin user
        const bcrypt = require('bcrypt');
        const hashedPassword = await bcrypt.hash('admin123', 10);
        
        await this.query(`
          INSERT INTO users (username, email, password_hash, role, full_name, is_active)
          VALUES ($1, $2, $3, $4, $5, $6)
        `, [
          'admin',
          'admin@intertravel.com',
          hashedPassword,
          'super_admin',
          'Administrador Principal',
          true
        ]);

        console.log('‚úÖ Usuario admin creado');
      }

      // Crear clientes de ejemplo
      const clientsExist = await this.query(
        'SELECT COUNT(*) as count FROM clients'
      );
      
      if (parseInt(clientsExist.rows[0].count) === 0) {
        const sampleClients = [
          {
            first_name: 'Juan',
            last_name: 'P√©rez',
            email: 'juan.perez@email.com',
            phone: '+54 261 4XX-1234',
            city: 'Mendoza',
            province: 'Mendoza',
            status: 'active'
          },
          {
            first_name: 'Mar√≠a',
            last_name: 'Gonz√°lez',
            email: 'maria.gonzalez@email.com',
            phone: '+54 11 4XXX-5678',
            city: 'Buenos Aires',
            province: 'Buenos Aires',
            status: 'active'
          },
          {
            first_name: 'Carlos',
            last_name: 'L√≥pez',
            email: 'carlos.lopez@email.com',
            phone: '+54 351 4XX-9012',
            city: 'C√≥rdoba',
            province: 'C√≥rdoba',
            status: 'active'
          },
          {
            first_name: 'Ana',
            last_name: 'Mart√≠nez',
            email: 'ana.martinez@email.com',
            phone: '+54 221 4XX-3456',
            city: 'La Plata',
            province: 'Buenos Aires',
            status: 'active'
          },
          {
            first_name: 'Diego',
            last_name: 'Silva',
            email: 'diego.silva@email.com',
            phone: '+54 341 4XX-7890',
            city: 'Rosario',
            province: 'Santa Fe',
            status: 'premium'
          }
        ];
        
        for (const client of sampleClients) {
          await this.query(`
            INSERT INTO clients (first_name, last_name, email, phone, city, province, status)
            VALUES ($1, $2, $3, $4, $5, $6, $7)
          `, [
            client.first_name,
            client.last_name,
            client.email,
            client.phone,
            client.city,
            client.province,
            client.status
          ]);
        }
        
        console.log('‚úÖ Clientes de ejemplo creados');
      }
      
      // Crear bookings/reservas de ejemplo
      const bookingsExist = await this.query(
        'SELECT COUNT(*) as count FROM bookings'
      );
      
      if (parseInt(bookingsExist.rows[0].count) === 0) {
        const sampleBookings = [
          {
            booking_reference: 'ITG-2025-001',
            package_id: 'PKG-MENDOZA-PREMIUM',
            package_name: 'Paquete Premium Mendoza',
            customer_name: 'Juan P√©rez',
            customer_email: 'juan.perez@email.com',
            customer_phone: '+54 261 4XX-1234',
            passenger_count: 2,
            total_amount: 15600.00,
            status: 'confirmed',
            travel_date: '2025-08-15'
          },
          {
            booking_reference: 'ITG-2025-002',
            package_id: 'PKG-TOUR-VINEDOS',
            package_name: 'Tour Vi√±edos',
            customer_name: 'Mar√≠a Gonz√°lez',
            customer_email: 'maria.gonzalez@email.com',
            customer_phone: '+54 11 4XXX-5678',
            passenger_count: 4,
            total_amount: 8900.00,
            status: 'pending',
            travel_date: '2025-07-28'
          },
          {
            booking_reference: 'ITG-2025-003',
            package_id: 'PKG-ACONCAGUA-EXP',
            package_name: 'Aconcagua Experience',
            customer_name: 'Carlos L√≥pez',
            customer_email: 'carlos.lopez@email.com',
            customer_phone: '+54 351 4XX-9012',
            passenger_count: 2,
            total_amount: 25400.00,
            status: 'confirmed',
            travel_date: '2025-09-10'
          }
        ];
        
        for (const booking of sampleBookings) {
          await this.query(`
            INSERT INTO bookings (
              booking_reference, package_id, package_name, customer_name, 
              customer_email, customer_phone, passenger_count, total_amount, 
              status, travel_date
            )
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
          `, [
            booking.booking_reference,
            booking.package_id,
            booking.package_name,
            booking.customer_name,
            booking.customer_email,
            booking.customer_phone,
            booking.passenger_count,
            booking.total_amount,
            booking.status,
            booking.travel_date
          ]);
        }
        
        console.log('‚úÖ Reservas de ejemplo creadas');
      }

      // Crear agencia de demo
      const agencyExists = await this.query(
        'SELECT id FROM agencies WHERE code = $1',
        ['VIAJES_TOTAL']
      );

      if (agencyExists.rows.length === 0) {
        const agencyResult = await this.query(`
          INSERT INTO agencies (
            code, name, business_name, email, phone, address, city, province, country,
            contact_person, commission_rate, status, contract_date
          )
          VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
          RETURNING id
        `, [
          'VIAJES_TOTAL',
          'Viajes Total',
          'Viajes Total S.R.L.',
          'info@viajestotal.com.ar',
          '+54 261 4XX-XXXX',
          'Av. San Mart√≠n 1234, Local 5',
          'Mendoza',
          'Mendoza',
          'Argentina',
          'Ana Garc√≠a',
          12.50,
          'active',
          '2024-01-15'
        ]);

        const agencyId = agencyResult.rows[0].id;

        // Crear usuario de agencia
        const bcrypt = require('bcrypt');
        const agencyPassword = await bcrypt.hash('agencia123', 10);
        
        await this.query(`
          INSERT INTO users (
            username, email, password_hash, role, full_name, agency_id, is_active
          )
          VALUES ($1, $2, $3, $4, $5, $6, $7)
        `, [
          'agencia_admin',
          'admin@viajestotal.com.ar',
          agencyPassword,
          'admin_agencia',
          'Administrador Viajes Total',
          agencyId,
          true
        ]);

        console.log('‚úÖ Agencia de demo y usuario creados');
      }

      // Insert default system config
      const configs = [
        {
          key: 'company_info',
          value: {
            name: 'InterTravel Group',
            evyt: '15.566',
            phone: '+54 261 XXX-XXXX',
            email: 'ventas@intertravel.com.ar',
            address: 'Chacras Park, Edificio Ceibo, Luj√°n de Cuyo, Mendoza'
          },
          description: 'Informaci√≥n de la empresa',
          is_public: true
        },
        {
          key: 'travel_compositor',
          value: {
            endpoint: 'https://online.travelcompositor.com',
            microsite_id: 'intertravelgroup',
            enabled: true
          },
          description: 'Configuraci√≥n Travel Compositor',
          is_public: false
        }
      ];

      for (const config of configs) {
        await this.query(`
          INSERT INTO system_config (key, value, description, is_public)
          VALUES ($1, $2, $3, $4)
          ON CONFLICT (key) DO UPDATE SET
            value = EXCLUDED.value,
            updated_at = CURRENT_TIMESTAMP
        `, [config.key, JSON.stringify(config.value), config.description, config.is_public]);
      }

      console.log('‚úÖ Configuraci√≥n por defecto insertada');
      
      // === DATOS INICIALES M√ìDULO CONTABLE ===
      // Plan de cuentas b√°sico
      await this.initializeChartOfAccounts();
      
      // Rankings por defecto
      await this.initializeAgencyRankings();
      
      // Reviews de ejemplo
      await this.initializeReviewsData();

    } catch (error) {
      console.error('‚ùå Error insertando datos por defecto:', error);
    }
  }
  
  async initializeChartOfAccounts() {
    try {
      const accountsExist = await this.query(
        'SELECT COUNT(*) as count FROM financial_accounts'
      );
      
      if (parseInt(accountsExist.rows[0].count) === 0) {
        const accounts = [
          // ACTIVOS
          { code: '1', name: 'ACTIVOS', type: 'assets', level: 1 },
          { code: '1.1', name: 'Activo Corriente', type: 'assets', parent: '1', level: 2 },
          { code: '1.1.1', name: 'Caja y Bancos', type: 'assets', parent: '1.1', level: 3 },
          { code: '1.1.2', name: 'Cuentas por Cobrar', type: 'assets', parent: '1.1', level: 3 },
          { code: '1.1.3', name: 'Cuentas por Cobrar Agencias', type: 'assets', parent: '1.1', level: 3 },
          
          // PASIVOS
          { code: '2', name: 'PASIVOS', type: 'liabilities', level: 1 },
          { code: '2.1', name: 'Pasivo Corriente', type: 'liabilities', parent: '2', level: 2 },
          { code: '2.1.1', name: 'Cuentas por Pagar', type: 'liabilities', parent: '2.1', level: 3 },
          { code: '2.1.2', name: 'Comisiones por Pagar', type: 'liabilities', parent: '2.1', level: 3 },
          
          // PATRIMONIO
          { code: '3', name: 'PATRIMONIO NETO', type: 'equity', level: 1 },
          { code: '3.1', name: 'Capital', type: 'equity', parent: '3', level: 2 },
          { code: '3.2', name: 'Resultados Acumulados', type: 'equity', parent: '3', level: 2 },
          
          // INGRESOS
          { code: '4', name: 'INGRESOS', type: 'revenue', level: 1 },
          { code: '4.1', name: 'Ventas de Paquetes', type: 'revenue', parent: '4', level: 2 },
          { code: '4.2', name: 'Comisiones de Agencias', type: 'revenue', parent: '4', level: 2 },
          { code: '4.3', name: 'Otros Ingresos', type: 'revenue', parent: '4', level: 2 },
          
          // GASTOS
          { code: '5', name: 'GASTOS', type: 'expenses', level: 1 },
          { code: '5.1', name: 'Gastos Operativos', type: 'expenses', parent: '5', level: 2 },
          { code: '5.2', name: 'Gastos de Ventas', type: 'expenses', parent: '5', level: 2 },
          { code: '5.3', name: 'Gastos Administrativos', type: 'expenses', parent: '5', level: 2 }
        ];
        
        // Insertar cuentas padre primero
        const insertedAccounts = new Map();
        
        for (const account of accounts) {
          let parentId = null;
          if (account.parent && insertedAccounts.has(account.parent)) {
            parentId = insertedAccounts.get(account.parent);
          }
          
          const result = await this.query(`
            INSERT INTO financial_accounts (account_code, account_name, account_type, parent_account_id, level)
            VALUES ($1, $2, $3, $4, $5)
            RETURNING id
          `, [account.code, account.name, account.type, parentId, account.level]);
          
          insertedAccounts.set(account.code, result.rows[0].id);
        }
        
        console.log('‚úÖ Plan de cuentas inicializado');
      }
    } catch (error) {
      console.error('‚ùå Error inicializando plan de cuentas:', error);
    }
  }
  
  async initializeAgencyRankings() {
    try {
      const rankingsExist = await this.query(
        'SELECT COUNT(*) as count FROM agency_rankings'
      );
      
      if (parseInt(rankingsExist.rows[0].count) === 0) {
        const rankings = [
          {
            name: 'Bronze',
            min_sales: 0,
            base_commission: 8.0,
            bonus: 0,
            credit_multiplier: 1.0,
            benefits: { priority_support: false, special_pricing: false }
          },
          {
            name: 'Silver',
            min_sales: 50000,
            base_commission: 10.0,
            bonus: 0.5,
            credit_multiplier: 1.5,
            benefits: { priority_support: true, special_pricing: false }
          },
          {
            name: 'Gold',
            min_sales: 100000,
            base_commission: 12.0,
            bonus: 1.0,
            credit_multiplier: 2.0,
            benefits: { priority_support: true, special_pricing: true, dedicated_manager: false }
          },
          {
            name: 'Platinum',
            min_sales: 200000,
            base_commission: 15.0,
            bonus: 2.0,
            credit_multiplier: 3.0,
            benefits: { priority_support: true, special_pricing: true, dedicated_manager: true }
          },
          {
            name: 'Diamond',
            min_sales: 500000,
            base_commission: 18.0,
            bonus: 3.0,
            credit_multiplier: 5.0,
            benefits: { priority_support: true, special_pricing: true, dedicated_manager: true, vip_events: true }
          }
        ];
        
        for (const ranking of rankings) {
          await this.query(`
            INSERT INTO agency_rankings (ranking_name, min_monthly_sales, base_commission_rate, bonus_rate, credit_limit_multiplier, benefits)
            VALUES ($1, $2, $3, $4, $5, $6)
          `, [
            ranking.name,
            ranking.min_sales,
            ranking.base_commission,
            ranking.bonus,
            ranking.credit_multiplier,
            JSON.stringify(ranking.benefits)
          ]);
        }
        
        console.log('‚úÖ Rankings de agencias inicializados');
      }
    } catch (error) {
      console.error('‚ùå Error inicializando rankings:', error);
    }
  }
  
  async initializeReviewsData() {
    try {
      const reviewsExist = await this.query(
        'SELECT COUNT(*) as count FROM reviews'
      );
      
      if (parseInt(reviewsExist.rows[0].count) === 0) {
        const sampleReviews = [
          {
            name: 'Mar√≠a Gonz√°lez',
            location: 'Buenos Aires',
            rating: 5,
            text: 'Incre√≠ble experiencia en Par√≠s. El servicio de InterTravel fue excepcional, todo estuvo perfectamente organizado.',
            trip: 'Par√≠s Rom√°ntico',
            avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612e5fa?w=100&h=100&fit=crop&auto=format',
            date: '2024-03-15',
            verified: true,
            featured: true
          },
          {
            name: 'Carlos Rodr√≠guez',
            location: 'Mendoza',
            rating: 5,
            text: 'Machu Picchu super√≥ todas mis expectativas. La atenci√≥n al detalle y el profesionalismo de InterTravel es incomparable.',
            trip: 'Aventura en Per√∫',
            avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&auto=format',
            date: '2024-02-28',
            verified: true,
            featured: true
          },
          {
            name: 'Ana Mart√≠nez',
            location: 'C√≥rdoba',
            rating: 5,
            text: 'Canc√∫n fue un para√≠so. Desde el primer contacto hasta el regreso, todo fue perfecto. ¬°Ya estamos planeando el pr√≥ximo viaje!',
            trip: 'Playa Todo Incluido',
            avatar: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100&h=100&fit=crop&auto=format',
            date: '2024-01-20',
            verified: true,
            featured: false
          },
          {
            name: 'Roberto Silva',
            location: 'Rosario',
            rating: 5,
            text: 'La organizaci√≥n fue perfecta, desde los vuelos hasta cada excursi√≥n. Recomiendo InterTravel sin dudarlo.',
            trip: 'Europa Cl√°sica',
            avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&auto=format',
            date: '2024-03-01',
            verified: true,
            featured: false
          },
          {
            name: 'Laura Fern√°ndez',
            location: 'La Plata',
            rating: 5,
            text: 'Mi luna de miel en Bali fue absolutamente m√°gica. Cada detalle fue pensado para hacer el viaje √∫nico e inolvidable.',
            trip: 'Bali Rom√°ntico',
            avatar: 'https://images.unsplash.com/photo-1544725176-7c40e5a71c5e?w=100&h=100&fit=crop&auto=format',
            date: '2024-02-14',
            verified: true,
            featured: true
          },
          {
            name: 'Diego Morales',
            location: 'Tucum√°n',
            rating: 5,
            text: 'Jap√≥n en temporada de cerezos fue un sue√±o hecho realidad. La gu√≠a cultural y las experiencias aut√©nticas superaron mis expectativas.',
            trip: 'Jap√≥n Cultural',
            avatar: 'https://images.unsplash.com/photo-1506794778202-cad84cf45f44?w=100&h=100&fit=crop&auto=format',
            date: '2024-04-05',
            verified: true,
            featured: false
          }
        ];
        
        for (const review of sampleReviews) {
          await this.query(`
            INSERT INTO reviews (name, location, rating, text, trip, avatar, date, verified, featured, status)
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, 'active')
          `, [
            review.name,
            review.location,
            review.rating,
            review.text,
            review.trip,
            review.avatar,
            review.date,
            review.verified,
            review.featured
          ]);
        }
        
        console.log('‚úÖ Reviews de ejemplo inicializadas');
      }
    } catch (error) {
      console.error('‚ùå Error inicializando reviews:', error);
    }
  }

  // Utility methods
  async healthCheck() {
    try {
      const result = await this.query('SELECT 1 as health');
      return { healthy: true, timestamp: new Date() };
    } catch (error) {
      return { healthy: false, error: error.message };
    }
  }
}

// Export singleton instance
const dbManager = new PostgreSQLManager();

module.exports = {
  dbManager,
  query: (text, params) => dbManager.query(text, params),
  getClient: () => dbManager.getClient(),
  connect: () => dbManager.connect(),
  disconnect: () => dbManager.disconnect(),
  initializeDatabase: () => dbManager.initializeDatabase(),
  getStatus: () => dbManager.getStatus(),
  healthCheck: () => dbManager.healthCheck()
};
