// Authentication Service - InterTravel App Cliente
import { apiClient } from './api-client';
import type { User } from './api-client';

export interface LoginCredentials {
  email: string;
  password: string;
}

export interface RegisterData {
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  password: string;
}

export interface AuthResult {
  success: boolean;
  user?: User;
  token?: string;
  error?: string;
}

class AuthService {
  // AUTENTICACION
  async login(credentials: LoginCredentials): Promise<AuthResult> {
    try {
      console.log('AuthService: Intentando login para', credentials.email);
      
      const response = await apiClient.login(credentials.email, credentials.password);
      
      if (response.success && response.data) {
        console.log('üîç AuthService DEBUG - response.data:', response.data); // DEBUG
        console.log('üîç AuthService DEBUG - full structure:', JSON.stringify(response, null, 2)); // DEBUG
        const { user, token } = response.data; // FIX: response.data.data porque el backend env√≠a data:{user, token}
        console.log('üîç AuthService DEBUG - user:', user); // DEBUG
        
        if (!user) {
          throw new Error('User data missing from API response');
        }
        
        this.saveUserData(user);
        console.log('AuthService: Login exitoso para', user.email);
        
        return {
          success: true,
          user,
          token
        };
      } else {
        console.error('AuthService: Error en login', response.error);
        return {
          success: false,
          error: response.error || 'Error en el login'
        };
      }
    } catch (error) {
      console.error('AuthService: Error de conexion', error);
      return {
        success: false,
        error: 'Error de conexion. Verifica tu internet.'
      };
    }
  }

  async register(data: RegisterData): Promise<AuthResult> {
    try {
      console.log('AuthService: Registrando usuario', data.email);
      
      const response = await apiClient.register(
        data.firstName,
        data.lastName,
        data.email,
        data.phone,
        data.password
      );
      
      if (response.success && response.data) {
        const { user, token } = response.data;
        this.saveUserData(user);
        console.log('AuthService: Registro exitoso para', user.email);
        
        return {
          success: true,
          user,
          token
        };
      } else {
        console.error('AuthService: Error en registro', response.error);
        return {
          success: false,
          error: response.error || 'Error en el registro'
        };
      }
    } catch (error) {
      console.error('AuthService: Error de conexion en registro', error);
      return {
        success: false,
        error: 'Error de conexion. Verifica tu internet.'
      };
    }
  }

  logout(): void {
    console.log('AuthService: Cerrando sesion');
    apiClient.logout();
    this.clearUserData();
    console.log('AuthService: Sesion cerrada');
  }

  // GESTION DE DATOS LOCALES
  saveUserData(user: User): void {
    if (typeof window !== 'undefined') {
      localStorage.setItem('user_data', JSON.stringify(user));
      console.log('AuthService: Datos de usuario guardados localmente');
    }
  }

  getUserData(): User | null {
    if (typeof window !== 'undefined') {
      try {
        const userData = localStorage.getItem('user_data');
        if (userData && userData !== 'undefined') {
          return JSON.parse(userData);
        }
      } catch (error) {
        console.error('AuthService: Error leyendo datos de usuario', error);
        // Limpiar datos corruptos
        localStorage.removeItem('user_data');
      }
    }
    return null;
  }

  clearUserData(): void {
    if (typeof window !== 'undefined') {
      localStorage.removeItem('user_data');
      localStorage.removeItem('auth_token');
    }
  }

  // VALIDACIONES Y UTILIDADES
  isAuthenticated(): boolean {
    return apiClient.isAuthenticated() && this.getUserData() !== null;
  }

  getCurrentUser(): User | null {
    return this.getUserData();
  }

  getToken(): string | null {
    return apiClient.getToken();
  }

  isValidEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  isValidPassword(password: string): boolean {
    return password.length >= 6;
  }

  // REFRESH DE DATOS
  async refreshUserData(): Promise<boolean> {
    try {
      if (!this.isAuthenticated()) {
        return false;
      }

      console.log('AuthService: Refrescando datos de usuario');
      
      const response = await apiClient.getUserProfile();
      
      if (response.success && response.data) {
        this.saveUserData(response.data.user);
        console.log('AuthService: Datos de usuario actualizados');
        return true;
      } else {
        console.error('AuthService: Error refrescando datos', response.error);
        if (response.error?.includes('Token') || response.error?.includes('401')) {
          this.logout();
        }
        return false;
      }
    } catch (error) {
      console.error('AuthService: Error en refresh', error);
      return false;
    }
  }

  // INICIALIZACION
  async initialize(): Promise<User | null> {
    try {
      console.log('AuthService: Inicializando...');
      
      const token = apiClient.getToken();
      const userData = this.getUserData();
      
      if (!token || !userData) {
        console.log('AuthService: No hay sesion activa');
        return null;
      }
      
      const isValid = await this.refreshUserData();
      
      if (isValid) {
        console.log('AuthService: Sesion valida restaurada para', userData.email);
        return userData;
      } else {
        console.log('AuthService: Sesion expirada, limpiando datos');
        this.logout();
        return null;
      }
    } catch (error) {
      console.error('AuthService: Error en inicializacion', error);
      this.logout();
      return null;
    }
  }
}

// Crear instancia singleton
const authServiceInstance = new AuthService();

// Exports
export const authService = authServiceInstance;
export default authServiceInstance;
export const useAuthService = () => authServiceInstance;
