#!/bin/bash

# Script para inicializar Git en InterTravel
echo "üîß Inicializando repositorio Git para InterTravel..."

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar si Git est√° instalado
if ! command -v git &> /dev/null; then
    print_error "Git no est√° instalado. Por favor, instala Git antes de continuar."
    exit 1
fi

print_success "Git $(git --version) detectado"

# Verificar si ya es un repositorio Git
if [ -d ".git" ]; then
    print_warning "Este directorio ya es un repositorio Git."
    read -p "¬øDeseas reinicializarlo? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -rf .git
        print_status "Repositorio Git anterior eliminado."
    else
        print_status "Manteniendo repositorio Git existente."
        exit 0
    fi
fi

# Inicializar repositorio Git
print_status "Inicializando repositorio Git..."
git init

if [ $? -eq 0 ]; then
    print_success "Repositorio Git inicializado correctamente"
else
    print_error "Error al inicializar el repositorio Git"
    exit 1
fi

# Configurar Git (si no est√° configurado globalmente)
if [ -z "$(git config --global user.name)" ]; then
    read -p "Ingresa tu nombre para Git: " git_name
    git config user.name "$git_name"
    print_success "Nombre de usuario configurado: $git_name"
fi

if [ -z "$(git config --global user.email)" ]; then
    read -p "Ingresa tu email para Git: " git_email
    git config user.email "$git_email"
    print_success "Email configurado: $git_email"
fi

# Verificar que los archivos importantes existan
print_status "Verificando archivos esenciales..."

required_files=(
    "README.md"
    ".gitignore"
    "package.json"
    "frontend/package.json"
    "backend/package.json"
    "ecosystem.config.js"
)

for file in "${required_files[@]}"; do
    if [ -f "$file" ]; then
        print_success "‚úì $file existe"
    else
        print_warning "‚ö† $file no encontrado"
    fi
done

# Agregar archivos al staging area
print_status "Agregando archivos al repositorio..."
git add .

# Crear commit inicial
print_status "Creando commit inicial..."
git commit -m "üöÄ Initial commit - InterTravel Web System

- ‚úÖ Frontend: Next.js 14 with TypeScript
- ‚úÖ Backend: Express.js with PostgreSQL
- ‚úÖ Mobile: Capacitor for iOS/Android
- ‚úÖ Travel Compositor integration
- ‚úÖ B2B2C system complete
- ‚úÖ Production ready configuration
- ‚úÖ PM2 ecosystem configuration
- ‚úÖ Deployment documentation

Features:
- Modern landing page with 3D globe
- Admin panel for agencies
- Mobile application
- Travel booking system
- Authentication & security
- Payment integration ready"

if [ $? -eq 0 ]; then
    print_success "Commit inicial creado correctamente"
else
    print_error "Error al crear el commit inicial"
    exit 1
fi

print_success "üéâ Repositorio Git configurado correctamente!"
echo ""
print_status "Pr√≥ximos pasos:"
echo "1. üìù Crear repositorio en GitHub/GitLab/Bitbucket"
echo "2. üîó Agregar remote: git remote add origin <URL_DEL_REPOSITORIO>"
echo "3. üì§ Subir c√≥digo: git push -u origin main"
echo ""
print_status "Comandos √∫tiles:"
echo "  git status          - Ver estado de archivos"
echo "  git add .           - Agregar cambios"
echo "  git commit -m \"..\"  - Crear commit"
echo "  git push            - Subir cambios"
echo "  git pull            - Descargar cambios"
echo ""
print_warning "üìã Recordatorios importantes:"
echo "‚Ä¢ Configura las variables de entorno antes del despliegue"
echo "‚Ä¢ Nunca subas archivos .env al repositorio"
echo "‚Ä¢ Revisa la documentaci√≥n de despliegue en DEPLOYMENT.md"
echo "‚Ä¢ Usa ramas para nuevas caracter√≠sticas: git checkout -b feature/nueva-funcionalidad"
