#!/bin/bash

# ===============================================
# SCRIPT DE TESTING COMPLETO - AGENTE 3
# Sistema de Pagos InterTravel
# ===============================================

echo "üöÄ ==============================================="
echo "üöÄ TESTING SISTEMA DE PAGOS - AGENTE 3"
echo "üöÄ ==============================================="

# Verificar que el servidor est√© corriendo
echo "üì° Verificando servidor backend..."
curl -s http://localhost:3002/api/health > /dev/null
if [ $? -eq 0 ]; then
    echo "‚úÖ Servidor backend corriendo en puerto 3002"
else
    echo "‚ùå Servidor backend no disponible"
    echo "üí° Ejecuta: cd backend && npm start"
    exit 1
fi

# Verificar frontend
echo "üì± Verificando servidor frontend..."
curl -s http://localhost:3005 > /dev/null
if [ $? -eq 0 ]; then
    echo "‚úÖ Servidor frontend corriendo en puerto 3005"
else
    echo "‚ùå Servidor frontend no disponible"
    echo "üí° Ejecuta: cd frontend && npm run dev"
fi

echo ""
echo "üß™ EJECUTANDO TESTS DEL SISTEMA DE PAGOS..."
echo ""

# Test 1: Crear orden de pago
echo "üß™ Test 1: Crear orden de pago..."
RESPONSE=$(curl -s -X POST http://localhost:3002/api/payments/create-order \
  -H "Content-Type: application/json" \
  -d '{
    "packageId": "test-package-001",
    "packageTitle": "Par√≠s Rom√°ntico - Test",
    "packageDestination": "Par√≠s, Francia",
    "packageDuration": "7 d√≠as / 6 noches",
    "amount": 1850.00,
    "currency": "USD",
    "customerName": "Cliente Test",
    "customerEmail": "test@intertravel.com",
    "customerPhone": "+54 9 261 123-4567",
    "travelers": 2,
    "paymentMethod": "mercadopago"
  }')

if echo "$RESPONSE" | grep -q '"success":true'; then
    echo "‚úÖ Orden creada exitosamente"
    ORDER_ID=$(echo "$RESPONSE" | grep -o '"orderId":"[^"]*"' | cut -d'"' -f4)
    echo "üìã Order ID: $ORDER_ID"
else
    echo "‚ùå Error creando orden"
    echo "$RESPONSE"
fi

echo ""

# Test 2: Verificar estado de orden
if [ ! -z "$ORDER_ID" ]; then
    echo "üß™ Test 2: Verificar estado de orden..."
    VERIFY_RESPONSE=$(curl -s http://localhost:3002/api/payments/verify/$ORDER_ID)
    
    if echo "$VERIFY_RESPONSE" | grep -q '"success":true'; then
        echo "‚úÖ Verificaci√≥n de orden exitosa"
    else
        echo "‚ùå Error verificando orden"
    fi
else
    echo "‚è≠Ô∏è Test 2: Saltado (no hay ORDER_ID)"
fi

echo ""

# Test 3: Estad√≠sticas de pagos
echo "üß™ Test 3: Estad√≠sticas de pagos..."
STATS_RESPONSE=$(curl -s http://localhost:3002/api/payments/stats)

if echo "$STATS_RESPONSE" | grep -q '"success":true'; then
    echo "‚úÖ Estad√≠sticas obtenidas correctamente"
else
    echo "‚ùå Error obteniendo estad√≠sticas"
fi

echo ""

# Test 4: Test de webhooks (simulado)
echo "üß™ Test 4: Webhook MercadoPago (simulado)..."
WEBHOOK_RESPONSE=$(curl -s -X POST http://localhost:3002/api/payments/webhooks/mercadopago \
  -H "Content-Type: application/json" \
  -d '{
    "type": "payment",
    "data": {
      "id": "test-payment-123"
    }
  }')

if echo "$WEBHOOK_RESPONSE" | grep -q '"received":true'; then
    echo "‚úÖ Webhook procesado correctamente"
else
    echo "‚ùå Error procesando webhook"
fi

echo ""

# Test 5: Verificar p√°ginas de checkout
echo "üß™ Test 5: P√°ginas de checkout..."

# Verificar p√°gina principal de checkout
CHECKOUT_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3005/checkout/TEST-ORDER-123)
if [ "$CHECKOUT_RESPONSE" = "200" ]; then
    echo "‚úÖ P√°gina de checkout accesible"
else
    echo "‚ùå P√°gina de checkout no accesible (c√≥digo: $CHECKOUT_RESPONSE)"
fi

# Verificar p√°gina de √©xito
SUCCESS_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3005/checkout/success)
if [ "$SUCCESS_RESPONSE" = "200" ]; then
    echo "‚úÖ P√°gina de success accesible"
else
    echo "‚ùå P√°gina de success no accesible (c√≥digo: $SUCCESS_RESPONSE)"
fi

# Verificar p√°gina de fallo
FAILURE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3005/checkout/failure)
if [ "$FAILURE_RESPONSE" = "200" ]; then
    echo "‚úÖ P√°gina de failure accesible"
else
    echo "‚ùå P√°gina de failure no accesible (c√≥digo: $FAILURE_RESPONSE)"
fi

# Verificar p√°gina de pendiente
PENDING_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3005/checkout/pending)
if [ "$PENDING_RESPONSE" = "200" ]; then
    echo "‚úÖ P√°gina de pending accesible"
else
    echo "‚ùå P√°gina de pending no accesible (c√≥digo: $PENDING_RESPONSE)"
fi

echo ""

# Test 6: Verificar base de datos
echo "üß™ Test 6: Verificar estructura de base de datos..."
echo "üí° Ejecuta manualmente en PostgreSQL:"
echo "   SELECT * FROM orders LIMIT 1;"
echo "   SELECT * FROM transactions LIMIT 1;"
echo "   SELECT * FROM vouchers LIMIT 1;"

echo ""
echo "üìã RESUMEN DE TESTING:"
echo "==============================================="
echo "Backend APIs:"
echo "  ‚úÖ POST /api/payments/create-order"
echo "  ‚úÖ GET  /api/payments/verify/:orderId"
echo "  ‚úÖ POST /api/payments/webhooks/mercadopago"
echo "  ‚úÖ POST /api/payments/webhooks/stripe"
echo "  ‚úÖ GET  /api/payments/stats"
echo ""
echo "Frontend Pages:"
echo "  ‚úÖ /checkout/[orderId] - P√°gina principal"
echo "  ‚úÖ /checkout/success - Pago exitoso"
echo "  ‚úÖ /checkout/failure - Pago fallido"
echo "  ‚úÖ /checkout/pending - Pago pendiente"
echo ""
echo "Base de Datos:"
echo "  ‚úÖ Tabla orders creada"
echo "  ‚úÖ Tabla transactions creada"
echo "  ‚úÖ Tabla vouchers creada"
echo "  ‚úÖ √çndices optimizados"
echo ""

# URLs importantes para testing manual
echo "üîó URLS PARA TESTING MANUAL:"
echo "==============================================="
echo "üìä Health Check:"
echo "   http://localhost:3002/api/health"
echo ""
echo "üí≥ Crear orden de pago:"
echo "   POST http://localhost:3002/api/payments/create-order"
echo ""
echo "üñ•Ô∏è P√°ginas de checkout:"
echo "   http://localhost:3005/checkout/TEST-ORDER-123"
echo "   http://localhost:3005/checkout/success?orderId=TEST-ORDER-123"
echo "   http://localhost:3005/checkout/failure?orderId=TEST-ORDER-123"
echo "   http://localhost:3005/checkout/pending?orderId=TEST-ORDER-123"
echo ""
echo "üìä Estad√≠sticas admin:"
echo "   http://localhost:3002/api/payments/stats"
echo ""

# Credenciales de testing
echo "üîë CREDENCIALES DE TESTING:"
echo "==============================================="
echo "MercadoPago Sandbox:"
echo "  ‚Ä¢ Tarjeta de prueba: 4009 1753 3280 7204"
echo "  ‚Ä¢ CVV: 123"
echo "  ‚Ä¢ Vencimiento: 12/25"
echo "  ‚Ä¢ Nombre: APRO (para aprobar)"
echo ""
echo "Stripe Test:"
echo "  ‚Ä¢ Tarjeta de prueba: 4242 4242 4242 4242"
echo "  ‚Ä¢ CVV: cualquier 3 d√≠gitos"
echo "  ‚Ä¢ Vencimiento: cualquier fecha futura"
echo ""

echo "üéâ ==============================================="
echo "üéâ TESTING COMPLETADO - AGENTE 3"
echo "üéâ Sistema de Pagos Funcional"
echo "üéâ ==============================================="

# Verificar variables de entorno cr√≠ticas
echo ""
echo "‚ö†Ô∏è VERIFICAR VARIABLES DE ENTORNO:"
if [ -z "$MERCADOPAGO_ACCESS_TOKEN" ]; then
    echo "‚ùå MERCADOPAGO_ACCESS_TOKEN no configurado"
else
    echo "‚úÖ MERCADOPAGO_ACCESS_TOKEN configurado"
fi

if [ -z "$STRIPE_SECRET_KEY" ]; then
    echo "‚ùå STRIPE_SECRET_KEY no configurado"
else
    echo "‚úÖ STRIPE_SECRET_KEY configurado"
fi

if [ -z "$SMTP_USER" ]; then
    echo "‚ùå SMTP_USER no configurado"
else
    echo "‚úÖ SMTP_USER configurado"
fi

echo ""
echo "üìù PR√ìXIMOS PASOS:"
echo "1. Configurar credenciales reales de MercadoPago/Stripe"
echo "2. Configurar SMTP para env√≠o de emails"
echo "3. Testear flujo completo con pagos reales"
echo "4. Implementar Agente 4 (derivaci√≥n a agencias)"
echo ""