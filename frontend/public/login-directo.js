console.log('üîê SCRIPT DE LOGIN DIRECTO AL BACKEND');

async function loginDirectoBackend() {
  try {
    console.log('üîç Probando login directo al backend...');
    
    const response = await fetch('http://localhost:3002/api/admin/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        username: 'admin',
        password: 'admin123'
      })
    });
    
    const data = await response.json();
    console.log('üì• Respuesta login:', data);
    
    if (data.success) {
      localStorage.setItem('auth_token', data.token);
      sessionStorage.setItem('auth_user', JSON.stringify(data.user));
      
      console.log('‚úÖ LOGIN EXITOSO');
      console.log('üé´ Token:', data.token);
      console.log('üë§ Usuario:', data.user);
      
      // Probar inmediatamente las keywords
      console.log('üîç Probando keywords con nuevo token...');
      
      const keywordsResponse = await fetch('http://localhost:3002/api/admin/priority-keywords', {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${data.token}`
        }
      });
      
      const keywordsData = await keywordsResponse.json();
      console.log('üìã Keywords response:', keywordsData);
      
      if (keywordsData.success) {
        console.log('‚úÖ KEYWORDS FUNCIONANDO CON PERSISTENCIA');
        alert('‚úÖ Login exitoso y keywords funcionando con persistencia!');
        location.reload();
      } else {
        console.log('‚ùå Error en keywords:', keywordsData.error);
      }
    } else {
      console.log('‚ùå Login fall√≥:', data.error);
      alert('‚ùå Login fall√≥: ' + data.error);
    }
  } catch (error) {
    console.log('‚ùå Error de conexi√≥n:', error);
    alert('‚ùå Error de conexi√≥n. ¬øEst√° el backend corriendo en puerto 3002?');
  }
}

// Ejecutar autom√°ticamente
loginDirectoBackend();

// Agregar funciones globales para debugging
window.debugLogin = {
  login: loginDirectoBackend,
  checkToken: () => {
    console.log('Token:', localStorage.getItem('auth_token'));
    console.log('User:', sessionStorage.getItem('auth_user'));
  },
  clearAuth: () => {
    localStorage.removeItem('auth_token');
    sessionStorage.removeItem('auth_user');
    console.log('‚úÖ Auth limpiado');
  }
};

console.log('üõ†Ô∏è Funciones disponibles: window.debugLogin.login(), window.debugLogin.checkToken(), window.debugLogin.clearAuth()');