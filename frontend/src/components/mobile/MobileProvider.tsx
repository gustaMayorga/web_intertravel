'use client';\n\nimport { useState, useEffect } from 'react';\nimport { StatusBar } from '@capacitor/status-bar';\nimport { App } from '@capacitor/app';\nimport { Preferences } from '@capacitor/preferences';\nimport { PushNotifications } from '@capacitor/push-notifications';\nimport { Device } from '@capacitor/device';\n\ninterface MobileContextType {\n  isNativeApp: boolean;\n  platform: 'ios' | 'android' | 'web';\n  deviceInfo: any;\n  pushToken: string | null;\n  networkStatus: 'connected' | 'disconnected';\n}\n\nconst MobileProvider = ({ children }: { children: React.ReactNode }) => {\n  const [isNativeApp, setIsNativeApp] = useState(false);\n  const [platform, setPlatform] = useState<'ios' | 'android' | 'web'>('web');\n  const [deviceInfo, setDeviceInfo] = useState(null);\n  const [pushToken, setPushToken] = useState<string | null>(null);\n  const [networkStatus, setNetworkStatus] = useState<'connected' | 'disconnected'>('connected');\n\n  useEffect(() => {\n    initializeMobileApp();\n  }, []);\n\n  const initializeMobileApp = async () => {\n    try {\n      // Detectar si es app nativa\n      const deviceInfo = await Device.getInfo();\n      setDeviceInfo(deviceInfo);\n      setIsNativeApp(deviceInfo.platform !== 'web');\n      setPlatform(deviceInfo.platform as 'ios' | 'android' | 'web');\n\n      if (deviceInfo.platform !== 'web') {\n        // Configurar StatusBar\n        await StatusBar.setStyle({ style: 'DARK' });\n        await StatusBar.setBackgroundColor({ color: '#121c2e' });\n\n        // Configurar push notifications\n        await initializePushNotifications();\n\n        // Listener para app state\n        App.addListener('appStateChange', ({ isActive }) => {\n          console.log('App state changed. Is active?', isActive);\n        });\n\n        // Listener para URLs externas\n        App.addListener('appUrlOpen', (event) => {\n          console.log('App opened via URL:', event.url);\n        });\n      }\n    } catch (error) {\n      console.error('Error initializing mobile app:', error);\n    }\n  };\n\n  const initializePushNotifications = async () => {\n    try {\n      // Pedir permisos\n      const permission = await PushNotifications.requestPermissions();\n      \n      if (permission.receive === 'granted') {\n        // Registrar para push notifications\n        await PushNotifications.register();\n\n        // Listener para token\n        PushNotifications.addListener('registration', (token) => {\n          console.log('Push registration success, token: ' + token.value);\n          setPushToken(token.value);\n          // Enviar token al backend\n          registerPushToken(token.value);\n        });\n\n        // Listener para errores\n        PushNotifications.addListener('registrationError', (error) => {\n          console.error('Error on registration: ' + JSON.stringify(error));\n        });\n\n        // Listener para notificaciones recibidas\n        PushNotifications.addListener('pushNotificationReceived', (notification) => {\n          console.log('Push notification received: ', notification);\n        });\n\n        // Listener para notificaciones tocadas\n        PushNotifications.addListener('pushNotificationActionPerformed', (notification) => {\n          console.log('Push notification action performed', notification.actionId, notification.inputValue);\n        });\n      }\n    } catch (error) {\n      console.error('Error setting up push notifications:', error);\n    }\n  };\n\n  const registerPushToken = async (token: string) => {\n    try {\n      // Obtener ID de usuario (puedes implementar tu l√≥gica)\n      const userId = await Preferences.get({ key: 'userId' });\n      \n      const response = await fetch('/api/mobile/register-push', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userId: userId.value || 'guest',\n          pushToken: token,\n          platform: platform\n        })\n      });\n\n      if (response.ok) {\n        console.log('Push token registered successfully');\n      }\n    } catch (error) {\n      console.error('Error registering push token:', error);\n    }\n  };\n\n  const contextValue: MobileContextType = {\n    isNativeApp,\n    platform,\n    deviceInfo,\n    pushToken,\n    networkStatus\n  };\n\n  return (\n    <div className={`mobile-app ${platform}`}>\n      {children}\n    </div>\n  );\n};\n\nexport default MobileProvider;\nexport type { MobileContextType };\n