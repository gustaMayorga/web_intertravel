'use client';\n\nimport { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Haptics, ImpactStyle } from '@capacitor/haptics';\n\ninterface MobileHeaderProps {\n  title: string;\n  showBack?: boolean;\n  showMenu?: boolean;\n  showNotifications?: boolean;\n  onBack?: () => void;\n  onMenu?: () => void;\n  rightAction?: React.ReactNode;\n}\n\nconst MobileHeader = ({ \n  title, \n  showBack = false, \n  showMenu = false,\n  showNotifications = true,\n  onBack, \n  onMenu,\n  rightAction \n}: MobileHeaderProps) => {\n  const [notificationCount] = useState(3);\n\n  const handleHapticFeedback = async () => {\n    try {\n      await Haptics.impact({ style: ImpactStyle.Light });\n    } catch (error) {\n      // Haptics no disponible en web\n    }\n  };\n\n  const handleBackPress = () => {\n    handleHapticFeedback();\n    if (onBack) {\n      onBack();\n    } else {\n      window.history.back();\n    }\n  };\n\n  const handleMenuPress = () => {\n    handleHapticFeedback();\n    if (onMenu) onMenu();\n  };\n\n  return (\n    <header className=\"fixed top-0 left-0 right-0 bg-intertravel-navy text-white z-50 safe-area-top\">\n      <div className=\"flex items-center justify-between px-4 py-3 h-14\">\n        {/* Left Side */}\n        <div className=\"flex items-center space-x-3\">\n          {showBack && (\n            <motion.button\n              whileTap={{ scale: 0.9 }}\n              onClick={handleBackPress}\n              className=\"p-2 -ml-2 rounded-full hover:bg-white/10 transition-colors\"\n            >\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n              </svg>\n            </motion.button>\n          )}\n          \n          {showMenu && (\n            <motion.button\n              whileTap={{ scale: 0.9 }}\n              onClick={handleMenuPress}\n              className=\"p-2 -ml-2 rounded-full hover:bg-white/10 transition-colors\"\n            >\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\n              </svg>\n            </motion.button>\n          )}\n        </div>\n\n        {/* Center - Title */}\n        <div className=\"flex-1 text-center\">\n          <h1 className=\"text-lg font-bold text-white truncate px-2\">\n            {title}\n          </h1>\n        </div>\n\n        {/* Right Side */}\n        <div className=\"flex items-center space-x-2\">\n          {rightAction}\n          \n          {showNotifications && (\n            <motion.button\n              whileTap={{ scale: 0.9 }}\n              className=\"relative p-2 rounded-full hover:bg-white/10 transition-colors\"\n            >\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} \n                  d=\"M15 17h5l-5-5-5-5h5m0 0V3\" />\n              </svg>\n              \n              {notificationCount > 0 && (\n                <motion.div\n                  initial={{ scale: 0 }}\n                  animate={{ scale: 1 }}\n                  className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center font-bold\"\n                >\n                  {notificationCount > 9 ? '9+' : notificationCount}\n                </motion.div>\n              )}\n            </motion.button>\n          )}\n        </div>\n      </div>\n      \n      {/* Status bar spacer for iOS */}\n      <div className=\"h-safe-top\" />\n    </header>\n  );\n};\n\nexport default MobileHeader;\n