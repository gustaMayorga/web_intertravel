import { NextRequest, NextResponse } from 'next/server';\n\nconst BACKEND_URL = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:3002';\n\n// POST /api/admin/destinations/sync-tc - Sincronizar con Travel Compositor\nexport async function POST(request: NextRequest) {\n  try {\n    console.log('üîÑ Iniciando sincronizaci√≥n con Travel Compositor...');\n    \n    // Intentar backend directo primero\n    try {\n      const response = await fetch(`${BACKEND_URL}/api/admin/destinations/sync-tc`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': request.headers.get('Authorization') || '',\n        },\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        console.log('‚úÖ Sincronizaci√≥n completada desde backend');\n        return NextResponse.json(data);\n      } else {\n        console.log('‚ùå Backend respondi√≥ con error:', response.status);\n      }\n    } catch (backendError) {\n      console.log('‚ùå Error conectando al backend:', backendError.message);\n    }\n    \n    // Fallback: simulaci√≥n de sincronizaci√≥n\n    console.log('üîÑ Simulando sincronizaci√≥n...');\n    \n    // Simular delay de sincronizaci√≥n\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    return NextResponse.json({\n      success: true,\n      message: 'Sincronizaci√≥n completada: 3 destinos nuevos, 2 actualizados (simulaci√≥n)',\n      synced: 3,\n      updated: 2,\n      source: 'mock-simulation'\n    });\n\n  } catch (error) {\n    console.error('Error syncing with TC:', error);\n    return NextResponse.json(\n      { error: 'Error en la sincronizaci√≥n', details: error.message },\n      { status: 500 }\n    );\n  }\n}