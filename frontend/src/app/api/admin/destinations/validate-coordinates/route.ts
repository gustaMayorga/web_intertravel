import { NextRequest, NextResponse } from 'next/server';\n\nconst BACKEND_URL = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:3002';\n\n// POST /api/admin/destinations/validate-coordinates - Validar y completar coordenadas\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    console.log('üó∫Ô∏è Validando coordenadas...');\n    \n    // Intentar backend directo primero\n    try {\n      const response = await fetch(`${BACKEND_URL}/api/admin/destinations/validate-coordinates`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': request.headers.get('Authorization') || '',\n        },\n        body: JSON.stringify(body),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        console.log('‚úÖ Coordenadas validadas desde backend');\n        return NextResponse.json(data);\n      } else {\n        console.log('‚ùå Backend respondi√≥ con error:', response.status);\n      }\n    } catch (backendError) {\n      console.log('‚ùå Error conectando al backend:', backendError.message);\n    }\n    \n    // Fallback: simulaci√≥n de validaci√≥n\n    console.log('üîÑ Simulando validaci√≥n de coordenadas...');\n    \n    const { destinationIds } = body;\n    const correctedCount = destinationIds ? Math.min(destinationIds.length, 3) : 0;\n    \n    return NextResponse.json({\n      success: true,\n      message: `${correctedCount} destinos actualizados con coordenadas v√°lidas (simulaci√≥n)`,\n      correctedCount: correctedCount,\n      source: 'mock-simulation'\n    });\n\n  } catch (error) {\n    console.error('Error validating coordinates:', error);\n    return NextResponse.json(\n      { error: 'Error validando coordenadas', details: error.message },\n      { status: 500 }\n    );\n  }\n}